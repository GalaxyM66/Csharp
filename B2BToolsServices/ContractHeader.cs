/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ContractHeader : TBase
  {
    private string _purHeadID;
    private string _conHeadID;
    private string _orderHeadID;

    public string CstID { get; set; }

    public string CstCode { get; set; }

    public string OrderStatus { get; set; }

    public string PayType { get; set; }

    public string PayStatus { get; set; }

    public string PayID { get; set; }

    public string PayCode { get; set; }

    public string AddrID { get; set; }

    public string Remark { get; set; }

    public string ContractStaus { get; set; }

    public string DeleFlag { get; set; }

    public string KdID { get; set; }

    public string OwnerID { get; set; }

    public string SaleDeptID { get; set; }

    public string SpecialFlag { get; set; }

    public string SPEID { get; set; }

    public string TransID { get; set; }

    public string TransMode { get; set; }

    public List<ContractDetail> DtlList { get; set; }

    public string PurHeadID
    {
      get
      {
        return _purHeadID;
      }
      set
      {
        __isset.purHeadID = true;
        this._purHeadID = value;
      }
    }

    public string ConHeadID
    {
      get
      {
        return _conHeadID;
      }
      set
      {
        __isset.conHeadID = true;
        this._conHeadID = value;
      }
    }

    public string OrderHeadID
    {
      get
      {
        return _orderHeadID;
      }
      set
      {
        __isset.orderHeadID = true;
        this._orderHeadID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool purHeadID;
      public bool conHeadID;
      public bool orderHeadID;
    }

    public ContractHeader() {
    }

    public ContractHeader(string cstID, string cstCode, string orderStatus, string payType, string payStatus, string payID, string payCode, string addrID, string remark, string contractStaus, string deleFlag, string kdID, string ownerID, string saleDeptID, string specialFlag, string SPEID, string transID, string transMode, List<ContractDetail> dtlList) : this() {
      this.CstID = cstID;
      this.CstCode = cstCode;
      this.OrderStatus = orderStatus;
      this.PayType = payType;
      this.PayStatus = payStatus;
      this.PayID = payID;
      this.PayCode = payCode;
      this.AddrID = addrID;
      this.Remark = remark;
      this.ContractStaus = contractStaus;
      this.DeleFlag = deleFlag;
      this.KdID = kdID;
      this.OwnerID = ownerID;
      this.SaleDeptID = saleDeptID;
      this.SpecialFlag = specialFlag;
      this.SPEID = SPEID;
      this.TransID = transID;
      this.TransMode = transMode;
      this.DtlList = dtlList;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_cstID = false;
        bool isset_cstCode = false;
        bool isset_orderStatus = false;
        bool isset_payType = false;
        bool isset_payStatus = false;
        bool isset_payID = false;
        bool isset_payCode = false;
        bool isset_addrID = false;
        bool isset_remark = false;
        bool isset_contractStaus = false;
        bool isset_deleFlag = false;
        bool isset_kdID = false;
        bool isset_ownerID = false;
        bool isset_saleDeptID = false;
        bool isset_specialFlag = false;
        bool isset_SPEID = false;
        bool isset_transID = false;
        bool isset_transMode = false;
        bool isset_dtlList = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CstID = iprot.ReadString();
                isset_cstID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CstCode = iprot.ReadString();
                isset_cstCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                OrderStatus = iprot.ReadString();
                isset_orderStatus = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                PayType = iprot.ReadString();
                isset_payType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                PayStatus = iprot.ReadString();
                isset_payStatus = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                PayID = iprot.ReadString();
                isset_payID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                PayCode = iprot.ReadString();
                isset_payCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                AddrID = iprot.ReadString();
                isset_addrID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Remark = iprot.ReadString();
                isset_remark = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                ContractStaus = iprot.ReadString();
                isset_contractStaus = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                DeleFlag = iprot.ReadString();
                isset_deleFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                KdID = iprot.ReadString();
                isset_kdID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                OwnerID = iprot.ReadString();
                isset_ownerID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                SaleDeptID = iprot.ReadString();
                isset_saleDeptID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                SpecialFlag = iprot.ReadString();
                isset_specialFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                SPEID = iprot.ReadString();
                isset_SPEID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.String) {
                TransID = iprot.ReadString();
                isset_transID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.String) {
                TransMode = iprot.ReadString();
                isset_transMode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.List) {
                {
                  DtlList = new List<ContractDetail>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    ContractDetail _elem6;
                    _elem6 = new ContractDetail();
                    _elem6.Read(iprot);
                    DtlList.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
                isset_dtlList = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.String) {
                PurHeadID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.String) {
                ConHeadID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.String) {
                OrderHeadID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_cstID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cstCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_orderStatus)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_payType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_payStatus)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_payID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_payCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_addrID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_remark)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_contractStaus)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_deleFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_kdID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ownerID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_saleDeptID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_specialFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SPEID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_transID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_transMode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_dtlList)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ContractHeader");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "cstID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CstID);
        oprot.WriteFieldEnd();
        field.Name = "cstCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CstCode);
        oprot.WriteFieldEnd();
        field.Name = "orderStatus";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderStatus);
        oprot.WriteFieldEnd();
        field.Name = "payType";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PayType);
        oprot.WriteFieldEnd();
        field.Name = "payStatus";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PayStatus);
        oprot.WriteFieldEnd();
        field.Name = "payID";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PayID);
        oprot.WriteFieldEnd();
        field.Name = "payCode";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PayCode);
        oprot.WriteFieldEnd();
        field.Name = "addrID";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AddrID);
        oprot.WriteFieldEnd();
        field.Name = "remark";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Remark);
        oprot.WriteFieldEnd();
        field.Name = "contractStaus";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContractStaus);
        oprot.WriteFieldEnd();
        field.Name = "deleFlag";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeleFlag);
        oprot.WriteFieldEnd();
        field.Name = "kdID";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(KdID);
        oprot.WriteFieldEnd();
        field.Name = "ownerID";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OwnerID);
        oprot.WriteFieldEnd();
        field.Name = "saleDeptID";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SaleDeptID);
        oprot.WriteFieldEnd();
        field.Name = "specialFlag";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SpecialFlag);
        oprot.WriteFieldEnd();
        field.Name = "SPEID";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SPEID);
        oprot.WriteFieldEnd();
        field.Name = "transID";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TransID);
        oprot.WriteFieldEnd();
        field.Name = "transMode";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TransMode);
        oprot.WriteFieldEnd();
        field.Name = "dtlList";
        field.Type = TType.List;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, DtlList.Count));
          foreach (ContractDetail _iter7 in DtlList)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (PurHeadID != null && __isset.purHeadID) {
          field.Name = "purHeadID";
          field.Type = TType.String;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PurHeadID);
          oprot.WriteFieldEnd();
        }
        if (ConHeadID != null && __isset.conHeadID) {
          field.Name = "conHeadID";
          field.Type = TType.String;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ConHeadID);
          oprot.WriteFieldEnd();
        }
        if (OrderHeadID != null && __isset.orderHeadID) {
          field.Name = "orderHeadID";
          field.Type = TType.String;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderHeadID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ContractHeader(");
      __sb.Append(", CstID: ");
      __sb.Append(CstID);
      __sb.Append(", CstCode: ");
      __sb.Append(CstCode);
      __sb.Append(", OrderStatus: ");
      __sb.Append(OrderStatus);
      __sb.Append(", PayType: ");
      __sb.Append(PayType);
      __sb.Append(", PayStatus: ");
      __sb.Append(PayStatus);
      __sb.Append(", PayID: ");
      __sb.Append(PayID);
      __sb.Append(", PayCode: ");
      __sb.Append(PayCode);
      __sb.Append(", AddrID: ");
      __sb.Append(AddrID);
      __sb.Append(", Remark: ");
      __sb.Append(Remark);
      __sb.Append(", ContractStaus: ");
      __sb.Append(ContractStaus);
      __sb.Append(", DeleFlag: ");
      __sb.Append(DeleFlag);
      __sb.Append(", KdID: ");
      __sb.Append(KdID);
      __sb.Append(", OwnerID: ");
      __sb.Append(OwnerID);
      __sb.Append(", SaleDeptID: ");
      __sb.Append(SaleDeptID);
      __sb.Append(", SpecialFlag: ");
      __sb.Append(SpecialFlag);
      __sb.Append(", SPEID: ");
      __sb.Append(SPEID);
      __sb.Append(", TransID: ");
      __sb.Append(TransID);
      __sb.Append(", TransMode: ");
      __sb.Append(TransMode);
      __sb.Append(", DtlList: ");
      __sb.Append(DtlList);
      if (PurHeadID != null && __isset.purHeadID) {
        __sb.Append(", PurHeadID: ");
        __sb.Append(PurHeadID);
      }
      if (ConHeadID != null && __isset.conHeadID) {
        __sb.Append(", ConHeadID: ");
        __sb.Append(ConHeadID);
      }
      if (OrderHeadID != null && __isset.orderHeadID) {
        __sb.Append(", OrderHeadID: ");
        __sb.Append(OrderHeadID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
