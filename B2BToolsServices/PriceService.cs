/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{
  public partial class PriceService {
    public interface ISync {
      UserInfo Login(string userCode, string passwords);
      List<DeptInfo> GetAllowedDept(string userID);
      CustomerInfo CheckCustomer(string customerCode);
      InquiryOrder CheckOutSkuCode(string outskucode, CustomerInfo customer);
      List<RespPriceInfo> QueryPrice(List<InquiryOrder> inquiryList, CustomerInfo customer);
      List<CmsSku> QuerySku(string matchText, string ownerid);
      long NewSku(InquiryOrder sku, string cstID, string cstType, string cmsGoodID, string convert, string empID);
      List<CmsSku> QuerySkuMatch(string extSkuCode, string cstID, string ownerid, string matchText);
      List<PreparedOrder> ConvertCMSCode(List<PreparedOrder> orderList, string ownerid);
      long DelMatch(string relID);
      long AddBidHistroy(BidOper oper);
      List<PreparedOrder> PreviewOrder(List<PreparedOrder> orderList, OrderCustomer customer);
      List<long> InsertOrder(ContractHeader orderHeader, string empID);
      OrderCustomer GetOrderCustomer(OrderCustomer customer);
      List<KVPair> GetDataDict(string dictType);
      List<KVPair> GetSendAddrs(string cstID);
      List<StockDetail> GetStockDetail(OrderCustomer customer, string goodid);
      List<string> VerifyOrder(ContractHeader orderHeader, string empID);
      int ChangePassword(string userCode, string oldPass, string newPass);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_Login(AsyncCallback callback, object state, string userCode, string passwords);
      UserInfo End_Login(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAllowedDept(AsyncCallback callback, object state, string userID);
      List<DeptInfo> End_GetAllowedDept(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CheckCustomer(AsyncCallback callback, object state, string customerCode);
      CustomerInfo End_CheckCustomer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CheckOutSkuCode(AsyncCallback callback, object state, string outskucode, CustomerInfo customer);
      InquiryOrder End_CheckOutSkuCode(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_QueryPrice(AsyncCallback callback, object state, List<InquiryOrder> inquiryList, CustomerInfo customer);
      List<RespPriceInfo> End_QueryPrice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_QuerySku(AsyncCallback callback, object state, string matchText, string ownerid);
      List<CmsSku> End_QuerySku(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_NewSku(AsyncCallback callback, object state, InquiryOrder sku, string cstID, string cstType, string cmsGoodID, string convert, string empID);
      long End_NewSku(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_QuerySkuMatch(AsyncCallback callback, object state, string extSkuCode, string cstID, string ownerid, string matchText);
      List<CmsSku> End_QuerySkuMatch(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ConvertCMSCode(AsyncCallback callback, object state, List<PreparedOrder> orderList, string ownerid);
      List<PreparedOrder> End_ConvertCMSCode(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DelMatch(AsyncCallback callback, object state, string relID);
      long End_DelMatch(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_AddBidHistroy(AsyncCallback callback, object state, BidOper oper);
      long End_AddBidHistroy(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PreviewOrder(AsyncCallback callback, object state, List<PreparedOrder> orderList, OrderCustomer customer);
      List<PreparedOrder> End_PreviewOrder(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_InsertOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID);
      List<long> End_InsertOrder(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetOrderCustomer(AsyncCallback callback, object state, OrderCustomer customer);
      OrderCustomer End_GetOrderCustomer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetDataDict(AsyncCallback callback, object state, string dictType);
      List<KVPair> End_GetDataDict(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetSendAddrs(AsyncCallback callback, object state, string cstID);
      List<KVPair> End_GetSendAddrs(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetStockDetail(AsyncCallback callback, object state, OrderCustomer customer, string goodid);
      List<StockDetail> End_GetStockDetail(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_VerifyOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID);
      List<string> End_VerifyOrder(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ChangePassword(AsyncCallback callback, object state, string userCode, string oldPass, string newPass);
      int End_ChangePassword(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Login(AsyncCallback callback, object state, string userCode, string passwords)
      {
        return send_Login(callback, state, userCode, passwords);
      }

      public UserInfo End_Login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Login();
      }

      #endif

      public UserInfo Login(string userCode, string passwords)
      {
        #if !SILVERLIGHT
        send_Login(userCode, passwords);
        return recv_Login();

        #else
        var asyncResult = Begin_Login(null, null, userCode, passwords);
        return End_Login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Login(AsyncCallback callback, object state, string userCode, string passwords)
      #else
      public void send_Login(string userCode, string passwords)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Login", TMessageType.Call, seqid_));
        Login_args args = new Login_args();
        args.UserCode = userCode;
        args.Passwords = passwords;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public UserInfo recv_Login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Login_result result = new Login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAllowedDept(AsyncCallback callback, object state, string userID)
      {
        return send_GetAllowedDept(callback, state, userID);
      }

      public List<DeptInfo> End_GetAllowedDept(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllowedDept();
      }

      #endif

      public List<DeptInfo> GetAllowedDept(string userID)
      {
        #if !SILVERLIGHT
        send_GetAllowedDept(userID);
        return recv_GetAllowedDept();

        #else
        var asyncResult = Begin_GetAllowedDept(null, null, userID);
        return End_GetAllowedDept(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAllowedDept(AsyncCallback callback, object state, string userID)
      #else
      public void send_GetAllowedDept(string userID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAllowedDept", TMessageType.Call, seqid_));
        GetAllowedDept_args args = new GetAllowedDept_args();
        args.UserID = userID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<DeptInfo> recv_GetAllowedDept()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAllowedDept_result result = new GetAllowedDept_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllowedDept failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CheckCustomer(AsyncCallback callback, object state, string customerCode)
      {
        return send_CheckCustomer(callback, state, customerCode);
      }

      public CustomerInfo End_CheckCustomer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CheckCustomer();
      }

      #endif

      public CustomerInfo CheckCustomer(string customerCode)
      {
        #if !SILVERLIGHT
        send_CheckCustomer(customerCode);
        return recv_CheckCustomer();

        #else
        var asyncResult = Begin_CheckCustomer(null, null, customerCode);
        return End_CheckCustomer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CheckCustomer(AsyncCallback callback, object state, string customerCode)
      #else
      public void send_CheckCustomer(string customerCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CheckCustomer", TMessageType.Call, seqid_));
        CheckCustomer_args args = new CheckCustomer_args();
        args.CustomerCode = customerCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public CustomerInfo recv_CheckCustomer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckCustomer_result result = new CheckCustomer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckCustomer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CheckOutSkuCode(AsyncCallback callback, object state, string outskucode, CustomerInfo customer)
      {
        return send_CheckOutSkuCode(callback, state, outskucode, customer);
      }

      public InquiryOrder End_CheckOutSkuCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CheckOutSkuCode();
      }

      #endif

      public InquiryOrder CheckOutSkuCode(string outskucode, CustomerInfo customer)
      {
        #if !SILVERLIGHT
        send_CheckOutSkuCode(outskucode, customer);
        return recv_CheckOutSkuCode();

        #else
        var asyncResult = Begin_CheckOutSkuCode(null, null, outskucode, customer);
        return End_CheckOutSkuCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CheckOutSkuCode(AsyncCallback callback, object state, string outskucode, CustomerInfo customer)
      #else
      public void send_CheckOutSkuCode(string outskucode, CustomerInfo customer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CheckOutSkuCode", TMessageType.Call, seqid_));
        CheckOutSkuCode_args args = new CheckOutSkuCode_args();
        args.Outskucode = outskucode;
        args.Customer = customer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public InquiryOrder recv_CheckOutSkuCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckOutSkuCode_result result = new CheckOutSkuCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckOutSkuCode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_QueryPrice(AsyncCallback callback, object state, List<InquiryOrder> inquiryList, CustomerInfo customer)
      {
        return send_QueryPrice(callback, state, inquiryList, customer);
      }

      public List<RespPriceInfo> End_QueryPrice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QueryPrice();
      }

      #endif

      public List<RespPriceInfo> QueryPrice(List<InquiryOrder> inquiryList, CustomerInfo customer)
      {
        #if !SILVERLIGHT
        send_QueryPrice(inquiryList, customer);
        return recv_QueryPrice();

        #else
        var asyncResult = Begin_QueryPrice(null, null, inquiryList, customer);
        return End_QueryPrice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QueryPrice(AsyncCallback callback, object state, List<InquiryOrder> inquiryList, CustomerInfo customer)
      #else
      public void send_QueryPrice(List<InquiryOrder> inquiryList, CustomerInfo customer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("QueryPrice", TMessageType.Call, seqid_));
        QueryPrice_args args = new QueryPrice_args();
        args.InquiryList = inquiryList;
        args.Customer = customer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<RespPriceInfo> recv_QueryPrice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QueryPrice_result result = new QueryPrice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryPrice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_QuerySku(AsyncCallback callback, object state, string matchText, string ownerid)
      {
        return send_QuerySku(callback, state, matchText, ownerid);
      }

      public List<CmsSku> End_QuerySku(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QuerySku();
      }

      #endif

      public List<CmsSku> QuerySku(string matchText, string ownerid)
      {
        #if !SILVERLIGHT
        send_QuerySku(matchText, ownerid);
        return recv_QuerySku();

        #else
        var asyncResult = Begin_QuerySku(null, null, matchText, ownerid);
        return End_QuerySku(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuerySku(AsyncCallback callback, object state, string matchText, string ownerid)
      #else
      public void send_QuerySku(string matchText, string ownerid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("QuerySku", TMessageType.Call, seqid_));
        QuerySku_args args = new QuerySku_args();
        args.MatchText = matchText;
        args.Ownerid = ownerid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CmsSku> recv_QuerySku()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuerySku_result result = new QuerySku_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QuerySku failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_NewSku(AsyncCallback callback, object state, InquiryOrder sku, string cstID, string cstType, string cmsGoodID, string convert, string empID)
      {
        return send_NewSku(callback, state, sku, cstID, cstType, cmsGoodID, convert, empID);
      }

      public long End_NewSku(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_NewSku();
      }

      #endif

      public long NewSku(InquiryOrder sku, string cstID, string cstType, string cmsGoodID, string convert, string empID)
      {
        #if !SILVERLIGHT
        send_NewSku(sku, cstID, cstType, cmsGoodID, convert, empID);
        return recv_NewSku();

        #else
        var asyncResult = Begin_NewSku(null, null, sku, cstID, cstType, cmsGoodID, convert, empID);
        return End_NewSku(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_NewSku(AsyncCallback callback, object state, InquiryOrder sku, string cstID, string cstType, string cmsGoodID, string convert, string empID)
      #else
      public void send_NewSku(InquiryOrder sku, string cstID, string cstType, string cmsGoodID, string convert, string empID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("NewSku", TMessageType.Call, seqid_));
        NewSku_args args = new NewSku_args();
        args.Sku = sku;
        args.CstID = cstID;
        args.CstType = cstType;
        args.CmsGoodID = cmsGoodID;
        args.Convert = convert;
        args.EmpID = empID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_NewSku()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        NewSku_result result = new NewSku_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "NewSku failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_QuerySkuMatch(AsyncCallback callback, object state, string extSkuCode, string cstID, string ownerid, string matchText)
      {
        return send_QuerySkuMatch(callback, state, extSkuCode, cstID, ownerid, matchText);
      }

      public List<CmsSku> End_QuerySkuMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QuerySkuMatch();
      }

      #endif

      public List<CmsSku> QuerySkuMatch(string extSkuCode, string cstID, string ownerid, string matchText)
      {
        #if !SILVERLIGHT
        send_QuerySkuMatch(extSkuCode, cstID, ownerid, matchText);
        return recv_QuerySkuMatch();

        #else
        var asyncResult = Begin_QuerySkuMatch(null, null, extSkuCode, cstID, ownerid, matchText);
        return End_QuerySkuMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuerySkuMatch(AsyncCallback callback, object state, string extSkuCode, string cstID, string ownerid, string matchText)
      #else
      public void send_QuerySkuMatch(string extSkuCode, string cstID, string ownerid, string matchText)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("QuerySkuMatch", TMessageType.Call, seqid_));
        QuerySkuMatch_args args = new QuerySkuMatch_args();
        args.ExtSkuCode = extSkuCode;
        args.CstID = cstID;
        args.Ownerid = ownerid;
        args.MatchText = matchText;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<CmsSku> recv_QuerySkuMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuerySkuMatch_result result = new QuerySkuMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QuerySkuMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ConvertCMSCode(AsyncCallback callback, object state, List<PreparedOrder> orderList, string ownerid)
      {
        return send_ConvertCMSCode(callback, state, orderList, ownerid);
      }

      public List<PreparedOrder> End_ConvertCMSCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ConvertCMSCode();
      }

      #endif

      public List<PreparedOrder> ConvertCMSCode(List<PreparedOrder> orderList, string ownerid)
      {
        #if !SILVERLIGHT
        send_ConvertCMSCode(orderList, ownerid);
        return recv_ConvertCMSCode();

        #else
        var asyncResult = Begin_ConvertCMSCode(null, null, orderList, ownerid);
        return End_ConvertCMSCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ConvertCMSCode(AsyncCallback callback, object state, List<PreparedOrder> orderList, string ownerid)
      #else
      public void send_ConvertCMSCode(List<PreparedOrder> orderList, string ownerid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ConvertCMSCode", TMessageType.Call, seqid_));
        ConvertCMSCode_args args = new ConvertCMSCode_args();
        args.OrderList = orderList;
        args.Ownerid = ownerid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PreparedOrder> recv_ConvertCMSCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ConvertCMSCode_result result = new ConvertCMSCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ConvertCMSCode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DelMatch(AsyncCallback callback, object state, string relID)
      {
        return send_DelMatch(callback, state, relID);
      }

      public long End_DelMatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DelMatch();
      }

      #endif

      public long DelMatch(string relID)
      {
        #if !SILVERLIGHT
        send_DelMatch(relID);
        return recv_DelMatch();

        #else
        var asyncResult = Begin_DelMatch(null, null, relID);
        return End_DelMatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DelMatch(AsyncCallback callback, object state, string relID)
      #else
      public void send_DelMatch(string relID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DelMatch", TMessageType.Call, seqid_));
        DelMatch_args args = new DelMatch_args();
        args.RelID = relID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_DelMatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DelMatch_result result = new DelMatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DelMatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddBidHistroy(AsyncCallback callback, object state, BidOper oper)
      {
        return send_AddBidHistroy(callback, state, oper);
      }

      public long End_AddBidHistroy(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AddBidHistroy();
      }

      #endif

      public long AddBidHistroy(BidOper oper)
      {
        #if !SILVERLIGHT
        send_AddBidHistroy(oper);
        return recv_AddBidHistroy();

        #else
        var asyncResult = Begin_AddBidHistroy(null, null, oper);
        return End_AddBidHistroy(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddBidHistroy(AsyncCallback callback, object state, BidOper oper)
      #else
      public void send_AddBidHistroy(BidOper oper)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddBidHistroy", TMessageType.Call, seqid_));
        AddBidHistroy_args args = new AddBidHistroy_args();
        args.Oper = oper;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_AddBidHistroy()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddBidHistroy_result result = new AddBidHistroy_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddBidHistroy failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PreviewOrder(AsyncCallback callback, object state, List<PreparedOrder> orderList, OrderCustomer customer)
      {
        return send_PreviewOrder(callback, state, orderList, customer);
      }

      public List<PreparedOrder> End_PreviewOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PreviewOrder();
      }

      #endif

      public List<PreparedOrder> PreviewOrder(List<PreparedOrder> orderList, OrderCustomer customer)
      {
        #if !SILVERLIGHT
        send_PreviewOrder(orderList, customer);
        return recv_PreviewOrder();

        #else
        var asyncResult = Begin_PreviewOrder(null, null, orderList, customer);
        return End_PreviewOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PreviewOrder(AsyncCallback callback, object state, List<PreparedOrder> orderList, OrderCustomer customer)
      #else
      public void send_PreviewOrder(List<PreparedOrder> orderList, OrderCustomer customer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PreviewOrder", TMessageType.Call, seqid_));
        PreviewOrder_args args = new PreviewOrder_args();
        args.OrderList = orderList;
        args.Customer = customer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PreparedOrder> recv_PreviewOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PreviewOrder_result result = new PreviewOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PreviewOrder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_InsertOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID)
      {
        return send_InsertOrder(callback, state, orderHeader, empID);
      }

      public List<long> End_InsertOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_InsertOrder();
      }

      #endif

      public List<long> InsertOrder(ContractHeader orderHeader, string empID)
      {
        #if !SILVERLIGHT
        send_InsertOrder(orderHeader, empID);
        return recv_InsertOrder();

        #else
        var asyncResult = Begin_InsertOrder(null, null, orderHeader, empID);
        return End_InsertOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_InsertOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID)
      #else
      public void send_InsertOrder(ContractHeader orderHeader, string empID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("InsertOrder", TMessageType.Call, seqid_));
        InsertOrder_args args = new InsertOrder_args();
        args.OrderHeader = orderHeader;
        args.EmpID = empID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<long> recv_InsertOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InsertOrder_result result = new InsertOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InsertOrder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetOrderCustomer(AsyncCallback callback, object state, OrderCustomer customer)
      {
        return send_GetOrderCustomer(callback, state, customer);
      }

      public OrderCustomer End_GetOrderCustomer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetOrderCustomer();
      }

      #endif

      public OrderCustomer GetOrderCustomer(OrderCustomer customer)
      {
        #if !SILVERLIGHT
        send_GetOrderCustomer(customer);
        return recv_GetOrderCustomer();

        #else
        var asyncResult = Begin_GetOrderCustomer(null, null, customer);
        return End_GetOrderCustomer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetOrderCustomer(AsyncCallback callback, object state, OrderCustomer customer)
      #else
      public void send_GetOrderCustomer(OrderCustomer customer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetOrderCustomer", TMessageType.Call, seqid_));
        GetOrderCustomer_args args = new GetOrderCustomer_args();
        args.Customer = customer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public OrderCustomer recv_GetOrderCustomer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetOrderCustomer_result result = new GetOrderCustomer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetOrderCustomer failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDataDict(AsyncCallback callback, object state, string dictType)
      {
        return send_GetDataDict(callback, state, dictType);
      }

      public List<KVPair> End_GetDataDict(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDataDict();
      }

      #endif

      public List<KVPair> GetDataDict(string dictType)
      {
        #if !SILVERLIGHT
        send_GetDataDict(dictType);
        return recv_GetDataDict();

        #else
        var asyncResult = Begin_GetDataDict(null, null, dictType);
        return End_GetDataDict(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDataDict(AsyncCallback callback, object state, string dictType)
      #else
      public void send_GetDataDict(string dictType)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDataDict", TMessageType.Call, seqid_));
        GetDataDict_args args = new GetDataDict_args();
        args.DictType = dictType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<KVPair> recv_GetDataDict()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDataDict_result result = new GetDataDict_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDataDict failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSendAddrs(AsyncCallback callback, object state, string cstID)
      {
        return send_GetSendAddrs(callback, state, cstID);
      }

      public List<KVPair> End_GetSendAddrs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSendAddrs();
      }

      #endif

      public List<KVPair> GetSendAddrs(string cstID)
      {
        #if !SILVERLIGHT
        send_GetSendAddrs(cstID);
        return recv_GetSendAddrs();

        #else
        var asyncResult = Begin_GetSendAddrs(null, null, cstID);
        return End_GetSendAddrs(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSendAddrs(AsyncCallback callback, object state, string cstID)
      #else
      public void send_GetSendAddrs(string cstID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSendAddrs", TMessageType.Call, seqid_));
        GetSendAddrs_args args = new GetSendAddrs_args();
        args.CstID = cstID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<KVPair> recv_GetSendAddrs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSendAddrs_result result = new GetSendAddrs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSendAddrs failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetStockDetail(AsyncCallback callback, object state, OrderCustomer customer, string goodid)
      {
        return send_GetStockDetail(callback, state, customer, goodid);
      }

      public List<StockDetail> End_GetStockDetail(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetStockDetail();
      }

      #endif

      public List<StockDetail> GetStockDetail(OrderCustomer customer, string goodid)
      {
        #if !SILVERLIGHT
        send_GetStockDetail(customer, goodid);
        return recv_GetStockDetail();

        #else
        var asyncResult = Begin_GetStockDetail(null, null, customer, goodid);
        return End_GetStockDetail(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetStockDetail(AsyncCallback callback, object state, OrderCustomer customer, string goodid)
      #else
      public void send_GetStockDetail(OrderCustomer customer, string goodid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetStockDetail", TMessageType.Call, seqid_));
        GetStockDetail_args args = new GetStockDetail_args();
        args.Customer = customer;
        args.Goodid = goodid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<StockDetail> recv_GetStockDetail()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetStockDetail_result result = new GetStockDetail_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStockDetail failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_VerifyOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID)
      {
        return send_VerifyOrder(callback, state, orderHeader, empID);
      }

      public List<string> End_VerifyOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_VerifyOrder();
      }

      #endif

      public List<string> VerifyOrder(ContractHeader orderHeader, string empID)
      {
        #if !SILVERLIGHT
        send_VerifyOrder(orderHeader, empID);
        return recv_VerifyOrder();

        #else
        var asyncResult = Begin_VerifyOrder(null, null, orderHeader, empID);
        return End_VerifyOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_VerifyOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID)
      #else
      public void send_VerifyOrder(ContractHeader orderHeader, string empID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("VerifyOrder", TMessageType.Call, seqid_));
        VerifyOrder_args args = new VerifyOrder_args();
        args.OrderHeader = orderHeader;
        args.EmpID = empID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_VerifyOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        VerifyOrder_result result = new VerifyOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VerifyOrder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ChangePassword(AsyncCallback callback, object state, string userCode, string oldPass, string newPass)
      {
        return send_ChangePassword(callback, state, userCode, oldPass, newPass);
      }

      public int End_ChangePassword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ChangePassword();
      }

      #endif

      public int ChangePassword(string userCode, string oldPass, string newPass)
      {
        #if !SILVERLIGHT
        send_ChangePassword(userCode, oldPass, newPass);
        return recv_ChangePassword();

        #else
        var asyncResult = Begin_ChangePassword(null, null, userCode, oldPass, newPass);
        return End_ChangePassword(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ChangePassword(AsyncCallback callback, object state, string userCode, string oldPass, string newPass)
      #else
      public void send_ChangePassword(string userCode, string oldPass, string newPass)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ChangePassword", TMessageType.Call, seqid_));
        ChangePassword_args args = new ChangePassword_args();
        args.UserCode = userCode;
        args.OldPass = oldPass;
        args.NewPass = newPass;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_ChangePassword()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ChangePassword_result result = new ChangePassword_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangePassword failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["Login"] = Login_Process;
        processMap_["GetAllowedDept"] = GetAllowedDept_Process;
        processMap_["CheckCustomer"] = CheckCustomer_Process;
        processMap_["CheckOutSkuCode"] = CheckOutSkuCode_Process;
        processMap_["QueryPrice"] = QueryPrice_Process;
        processMap_["QuerySku"] = QuerySku_Process;
        processMap_["NewSku"] = NewSku_Process;
        processMap_["QuerySkuMatch"] = QuerySkuMatch_Process;
        processMap_["ConvertCMSCode"] = ConvertCMSCode_Process;
        processMap_["DelMatch"] = DelMatch_Process;
        processMap_["AddBidHistroy"] = AddBidHistroy_Process;
        processMap_["PreviewOrder"] = PreviewOrder_Process;
        processMap_["InsertOrder"] = InsertOrder_Process;
        processMap_["GetOrderCustomer"] = GetOrderCustomer_Process;
        processMap_["GetDataDict"] = GetDataDict_Process;
        processMap_["GetSendAddrs"] = GetSendAddrs_Process;
        processMap_["GetStockDetail"] = GetStockDetail_Process;
        processMap_["VerifyOrder"] = VerifyOrder_Process;
        processMap_["ChangePassword"] = ChangePassword_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Login_args args = new Login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Login_result result = new Login_result();
        try
        {
          try
          {
            result.Success = iface_.Login(args.UserCode, args.Passwords);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Login", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAllowedDept_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAllowedDept_args args = new GetAllowedDept_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAllowedDept_result result = new GetAllowedDept_result();
        try
        {
          try
          {
            result.Success = iface_.GetAllowedDept(args.UserID);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("GetAllowedDept", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAllowedDept", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CheckCustomer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckCustomer_args args = new CheckCustomer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckCustomer_result result = new CheckCustomer_result();
        try
        {
          result.Success = iface_.CheckCustomer(args.CustomerCode);
          oprot.WriteMessageBegin(new TMessage("CheckCustomer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CheckCustomer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CheckOutSkuCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckOutSkuCode_args args = new CheckOutSkuCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckOutSkuCode_result result = new CheckOutSkuCode_result();
        try
        {
          result.Success = iface_.CheckOutSkuCode(args.Outskucode, args.Customer);
          oprot.WriteMessageBegin(new TMessage("CheckOutSkuCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CheckOutSkuCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QueryPrice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QueryPrice_args args = new QueryPrice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QueryPrice_result result = new QueryPrice_result();
        try
        {
          try
          {
            result.Success = iface_.QueryPrice(args.InquiryList, args.Customer);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("QueryPrice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("QueryPrice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuerySku_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuerySku_args args = new QuerySku_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuerySku_result result = new QuerySku_result();
        try
        {
          try
          {
            result.Success = iface_.QuerySku(args.MatchText, args.Ownerid);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("QuerySku", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("QuerySku", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void NewSku_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        NewSku_args args = new NewSku_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        NewSku_result result = new NewSku_result();
        try
        {
          try
          {
            result.Success = iface_.NewSku(args.Sku, args.CstID, args.CstType, args.CmsGoodID, args.Convert, args.EmpID);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("NewSku", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("NewSku", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuerySkuMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuerySkuMatch_args args = new QuerySkuMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuerySkuMatch_result result = new QuerySkuMatch_result();
        try
        {
          try
          {
            result.Success = iface_.QuerySkuMatch(args.ExtSkuCode, args.CstID, args.Ownerid, args.MatchText);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("QuerySkuMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("QuerySkuMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ConvertCMSCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ConvertCMSCode_args args = new ConvertCMSCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ConvertCMSCode_result result = new ConvertCMSCode_result();
        try
        {
          try
          {
            result.Success = iface_.ConvertCMSCode(args.OrderList, args.Ownerid);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("ConvertCMSCode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ConvertCMSCode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DelMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DelMatch_args args = new DelMatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DelMatch_result result = new DelMatch_result();
        try
        {
          try
          {
            result.Success = iface_.DelMatch(args.RelID);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("DelMatch", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DelMatch", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddBidHistroy_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddBidHistroy_args args = new AddBidHistroy_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddBidHistroy_result result = new AddBidHistroy_result();
        try
        {
          try
          {
            result.Success = iface_.AddBidHistroy(args.Oper);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("AddBidHistroy", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AddBidHistroy", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PreviewOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PreviewOrder_args args = new PreviewOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PreviewOrder_result result = new PreviewOrder_result();
        try
        {
          try
          {
            result.Success = iface_.PreviewOrder(args.OrderList, args.Customer);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("PreviewOrder", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PreviewOrder", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void InsertOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InsertOrder_args args = new InsertOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InsertOrder_result result = new InsertOrder_result();
        try
        {
          try
          {
            result.Success = iface_.InsertOrder(args.OrderHeader, args.EmpID);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("InsertOrder", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("InsertOrder", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetOrderCustomer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetOrderCustomer_args args = new GetOrderCustomer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetOrderCustomer_result result = new GetOrderCustomer_result();
        try
        {
          try
          {
            result.Success = iface_.GetOrderCustomer(args.Customer);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("GetOrderCustomer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetOrderCustomer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDataDict_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDataDict_args args = new GetDataDict_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDataDict_result result = new GetDataDict_result();
        try
        {
          try
          {
            result.Success = iface_.GetDataDict(args.DictType);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("GetDataDict", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetDataDict", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSendAddrs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSendAddrs_args args = new GetSendAddrs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSendAddrs_result result = new GetSendAddrs_result();
        try
        {
          try
          {
            result.Success = iface_.GetSendAddrs(args.CstID);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("GetSendAddrs", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSendAddrs", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetStockDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetStockDetail_args args = new GetStockDetail_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetStockDetail_result result = new GetStockDetail_result();
        try
        {
          try
          {
            result.Success = iface_.GetStockDetail(args.Customer, args.Goodid);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("GetStockDetail", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetStockDetail", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void VerifyOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        VerifyOrder_args args = new VerifyOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        VerifyOrder_result result = new VerifyOrder_result();
        try
        {
          try
          {
            result.Success = iface_.VerifyOrder(args.OrderHeader, args.EmpID);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("VerifyOrder", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("VerifyOrder", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ChangePassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ChangePassword_args args = new ChangePassword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ChangePassword_result result = new ChangePassword_result();
        try
        {
          try
          {
            result.Success = iface_.ChangePassword(args.UserCode, args.OldPass, args.NewPass);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("ChangePassword", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ChangePassword", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_args : TBase
    {
      private string _userCode;
      private string _passwords;

      public string UserCode
      {
        get
        {
          return _userCode;
        }
        set
        {
          __isset.userCode = true;
          this._userCode = value;
        }
      }

      public string Passwords
      {
        get
        {
          return _passwords;
        }
        set
        {
          __isset.passwords = true;
          this._passwords = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCode;
        public bool passwords;
      }

      public Login_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Passwords = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Login_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserCode != null && __isset.userCode) {
            field.Name = "userCode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserCode);
            oprot.WriteFieldEnd();
          }
          if (Passwords != null && __isset.passwords) {
            field.Name = "passwords";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Passwords);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Login_args(");
        bool __first = true;
        if (UserCode != null && __isset.userCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCode: ");
          __sb.Append(UserCode);
        }
        if (Passwords != null && __isset.passwords) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Passwords: ");
          __sb.Append(Passwords);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Login_result : TBase
    {
      private UserInfo _success;
      private ReturnMessage _retMsg;

      public UserInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public Login_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new UserInfo();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Login_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Login_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllowedDept_args : TBase
    {
      private string _userID;

      public string UserID
      {
        get
        {
          return _userID;
        }
        set
        {
          __isset.userID = true;
          this._userID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userID;
      }

      public GetAllowedDept_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAllowedDept_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserID != null && __isset.userID) {
            field.Name = "userID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAllowedDept_args(");
        bool __first = true;
        if (UserID != null && __isset.userID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserID: ");
          __sb.Append(UserID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAllowedDept_result : TBase
    {
      private List<DeptInfo> _success;
      private ReturnMessage _retMsg;

      public List<DeptInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public GetAllowedDept_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<DeptInfo>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      DeptInfo _elem10;
                      _elem10 = new DeptInfo();
                      _elem10.Read(iprot);
                      Success.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAllowedDept_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (DeptInfo _iter11 in Success)
                {
                  _iter11.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAllowedDept_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckCustomer_args : TBase
    {
      private string _customerCode;

      public string CustomerCode
      {
        get
        {
          return _customerCode;
        }
        set
        {
          __isset.customerCode = true;
          this._customerCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customerCode;
      }

      public CheckCustomer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CustomerCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckCustomer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CustomerCode != null && __isset.customerCode) {
            field.Name = "customerCode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CustomerCode);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckCustomer_args(");
        bool __first = true;
        if (CustomerCode != null && __isset.customerCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CustomerCode: ");
          __sb.Append(CustomerCode);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckCustomer_result : TBase
    {
      private CustomerInfo _success;

      public CustomerInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CheckCustomer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new CustomerInfo();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckCustomer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckCustomer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckOutSkuCode_args : TBase
    {
      private string _outskucode;
      private CustomerInfo _customer;

      public string Outskucode
      {
        get
        {
          return _outskucode;
        }
        set
        {
          __isset.outskucode = true;
          this._outskucode = value;
        }
      }

      public CustomerInfo Customer
      {
        get
        {
          return _customer;
        }
        set
        {
          __isset.customer = true;
          this._customer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool outskucode;
        public bool customer;
      }

      public CheckOutSkuCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Outskucode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Customer = new CustomerInfo();
                  Customer.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckOutSkuCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Outskucode != null && __isset.outskucode) {
            field.Name = "outskucode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Outskucode);
            oprot.WriteFieldEnd();
          }
          if (Customer != null && __isset.customer) {
            field.Name = "customer";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Customer.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckOutSkuCode_args(");
        bool __first = true;
        if (Outskucode != null && __isset.outskucode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Outskucode: ");
          __sb.Append(Outskucode);
        }
        if (Customer != null && __isset.customer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer: ");
          __sb.Append(Customer== null ? "<null>" : Customer.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckOutSkuCode_result : TBase
    {
      private InquiryOrder _success;

      public InquiryOrder Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CheckOutSkuCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new InquiryOrder();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckOutSkuCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckOutSkuCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QueryPrice_args : TBase
    {
      private List<InquiryOrder> _inquiryList;
      private CustomerInfo _customer;

      public List<InquiryOrder> InquiryList
      {
        get
        {
          return _inquiryList;
        }
        set
        {
          __isset.inquiryList = true;
          this._inquiryList = value;
        }
      }

      public CustomerInfo Customer
      {
        get
        {
          return _customer;
        }
        set
        {
          __isset.customer = true;
          this._customer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool inquiryList;
        public bool customer;
      }

      public QueryPrice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    InquiryList = new List<InquiryOrder>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      InquiryOrder _elem14;
                      _elem14 = new InquiryOrder();
                      _elem14.Read(iprot);
                      InquiryList.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Customer = new CustomerInfo();
                  Customer.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QueryPrice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (InquiryList != null && __isset.inquiryList) {
            field.Name = "inquiryList";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, InquiryList.Count));
              foreach (InquiryOrder _iter15 in InquiryList)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Customer != null && __isset.customer) {
            field.Name = "customer";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Customer.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QueryPrice_args(");
        bool __first = true;
        if (InquiryList != null && __isset.inquiryList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InquiryList: ");
          __sb.Append(InquiryList);
        }
        if (Customer != null && __isset.customer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer: ");
          __sb.Append(Customer== null ? "<null>" : Customer.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QueryPrice_result : TBase
    {
      private List<RespPriceInfo> _success;
      private ReturnMessage _retMsg;

      public List<RespPriceInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public QueryPrice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<RespPriceInfo>();
                    TList _list16 = iprot.ReadListBegin();
                    for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      RespPriceInfo _elem18;
                      _elem18 = new RespPriceInfo();
                      _elem18.Read(iprot);
                      Success.Add(_elem18);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QueryPrice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (RespPriceInfo _iter19 in Success)
                {
                  _iter19.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QueryPrice_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuerySku_args : TBase
    {
      private string _matchText;
      private string _ownerid;

      public string MatchText
      {
        get
        {
          return _matchText;
        }
        set
        {
          __isset.matchText = true;
          this._matchText = value;
        }
      }

      public string Ownerid
      {
        get
        {
          return _ownerid;
        }
        set
        {
          __isset.ownerid = true;
          this._ownerid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool matchText;
        public bool ownerid;
      }

      public QuerySku_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MatchText = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Ownerid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuerySku_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MatchText != null && __isset.matchText) {
            field.Name = "matchText";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchText);
            oprot.WriteFieldEnd();
          }
          if (Ownerid != null && __isset.ownerid) {
            field.Name = "ownerid";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ownerid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuerySku_args(");
        bool __first = true;
        if (MatchText != null && __isset.matchText) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchText: ");
          __sb.Append(MatchText);
        }
        if (Ownerid != null && __isset.ownerid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ownerid: ");
          __sb.Append(Ownerid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuerySku_result : TBase
    {
      private List<CmsSku> _success;
      private ReturnMessage _retMsg;

      public List<CmsSku> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public QuerySku_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<CmsSku>();
                    TList _list20 = iprot.ReadListBegin();
                    for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      CmsSku _elem22;
                      _elem22 = new CmsSku();
                      _elem22.Read(iprot);
                      Success.Add(_elem22);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuerySku_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (CmsSku _iter23 in Success)
                {
                  _iter23.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuerySku_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class NewSku_args : TBase
    {
      private InquiryOrder _sku;
      private string _cstID;
      private string _cstType;
      private string _cmsGoodID;
      private string _convert;
      private string _empID;

      public InquiryOrder Sku
      {
        get
        {
          return _sku;
        }
        set
        {
          __isset.sku = true;
          this._sku = value;
        }
      }

      public string CstID
      {
        get
        {
          return _cstID;
        }
        set
        {
          __isset.cstID = true;
          this._cstID = value;
        }
      }

      public string CstType
      {
        get
        {
          return _cstType;
        }
        set
        {
          __isset.cstType = true;
          this._cstType = value;
        }
      }

      public string CmsGoodID
      {
        get
        {
          return _cmsGoodID;
        }
        set
        {
          __isset.cmsGoodID = true;
          this._cmsGoodID = value;
        }
      }

      public string Convert
      {
        get
        {
          return _convert;
        }
        set
        {
          __isset.convert = true;
          this._convert = value;
        }
      }

      public string EmpID
      {
        get
        {
          return _empID;
        }
        set
        {
          __isset.empID = true;
          this._empID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sku;
        public bool cstID;
        public bool cstType;
        public bool cmsGoodID;
        public bool convert;
        public bool empID;
      }

      public NewSku_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Sku = new InquiryOrder();
                  Sku.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CstID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CstType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  CmsGoodID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Convert = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.String) {
                  EmpID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("NewSku_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Sku != null && __isset.sku) {
            field.Name = "sku";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Sku.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CstID != null && __isset.cstID) {
            field.Name = "cstID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CstID);
            oprot.WriteFieldEnd();
          }
          if (CstType != null && __isset.cstType) {
            field.Name = "cstType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CstType);
            oprot.WriteFieldEnd();
          }
          if (CmsGoodID != null && __isset.cmsGoodID) {
            field.Name = "cmsGoodID";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CmsGoodID);
            oprot.WriteFieldEnd();
          }
          if (Convert != null && __isset.convert) {
            field.Name = "convert";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Convert);
            oprot.WriteFieldEnd();
          }
          if (EmpID != null && __isset.empID) {
            field.Name = "empID";
            field.Type = TType.String;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EmpID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("NewSku_args(");
        bool __first = true;
        if (Sku != null && __isset.sku) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sku: ");
          __sb.Append(Sku== null ? "<null>" : Sku.ToString());
        }
        if (CstID != null && __isset.cstID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CstID: ");
          __sb.Append(CstID);
        }
        if (CstType != null && __isset.cstType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CstType: ");
          __sb.Append(CstType);
        }
        if (CmsGoodID != null && __isset.cmsGoodID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CmsGoodID: ");
          __sb.Append(CmsGoodID);
        }
        if (Convert != null && __isset.convert) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Convert: ");
          __sb.Append(Convert);
        }
        if (EmpID != null && __isset.empID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmpID: ");
          __sb.Append(EmpID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class NewSku_result : TBase
    {
      private long _success;
      private ReturnMessage _retMsg;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public NewSku_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("NewSku_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("NewSku_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuerySkuMatch_args : TBase
    {
      private string _extSkuCode;
      private string _cstID;
      private string _ownerid;
      private string _matchText;

      public string ExtSkuCode
      {
        get
        {
          return _extSkuCode;
        }
        set
        {
          __isset.extSkuCode = true;
          this._extSkuCode = value;
        }
      }

      public string CstID
      {
        get
        {
          return _cstID;
        }
        set
        {
          __isset.cstID = true;
          this._cstID = value;
        }
      }

      public string Ownerid
      {
        get
        {
          return _ownerid;
        }
        set
        {
          __isset.ownerid = true;
          this._ownerid = value;
        }
      }

      public string MatchText
      {
        get
        {
          return _matchText;
        }
        set
        {
          __isset.matchText = true;
          this._matchText = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool extSkuCode;
        public bool cstID;
        public bool ownerid;
        public bool matchText;
      }

      public QuerySkuMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ExtSkuCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CstID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Ownerid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  MatchText = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuerySkuMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ExtSkuCode != null && __isset.extSkuCode) {
            field.Name = "extSkuCode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ExtSkuCode);
            oprot.WriteFieldEnd();
          }
          if (CstID != null && __isset.cstID) {
            field.Name = "cstID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CstID);
            oprot.WriteFieldEnd();
          }
          if (Ownerid != null && __isset.ownerid) {
            field.Name = "ownerid";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ownerid);
            oprot.WriteFieldEnd();
          }
          if (MatchText != null && __isset.matchText) {
            field.Name = "matchText";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MatchText);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuerySkuMatch_args(");
        bool __first = true;
        if (ExtSkuCode != null && __isset.extSkuCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExtSkuCode: ");
          __sb.Append(ExtSkuCode);
        }
        if (CstID != null && __isset.cstID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CstID: ");
          __sb.Append(CstID);
        }
        if (Ownerid != null && __isset.ownerid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ownerid: ");
          __sb.Append(Ownerid);
        }
        if (MatchText != null && __isset.matchText) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MatchText: ");
          __sb.Append(MatchText);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuerySkuMatch_result : TBase
    {
      private List<CmsSku> _success;
      private ReturnMessage _retMsg;

      public List<CmsSku> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public QuerySkuMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<CmsSku>();
                    TList _list24 = iprot.ReadListBegin();
                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                    {
                      CmsSku _elem26;
                      _elem26 = new CmsSku();
                      _elem26.Read(iprot);
                      Success.Add(_elem26);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuerySkuMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (CmsSku _iter27 in Success)
                {
                  _iter27.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuerySkuMatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConvertCMSCode_args : TBase
    {
      private List<PreparedOrder> _orderList;
      private string _ownerid;

      public List<PreparedOrder> OrderList
      {
        get
        {
          return _orderList;
        }
        set
        {
          __isset.orderList = true;
          this._orderList = value;
        }
      }

      public string Ownerid
      {
        get
        {
          return _ownerid;
        }
        set
        {
          __isset.ownerid = true;
          this._ownerid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool orderList;
        public bool ownerid;
      }

      public ConvertCMSCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    OrderList = new List<PreparedOrder>();
                    TList _list28 = iprot.ReadListBegin();
                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                    {
                      PreparedOrder _elem30;
                      _elem30 = new PreparedOrder();
                      _elem30.Read(iprot);
                      OrderList.Add(_elem30);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Ownerid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConvertCMSCode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderList != null && __isset.orderList) {
            field.Name = "orderList";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, OrderList.Count));
              foreach (PreparedOrder _iter31 in OrderList)
              {
                _iter31.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Ownerid != null && __isset.ownerid) {
            field.Name = "ownerid";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ownerid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConvertCMSCode_args(");
        bool __first = true;
        if (OrderList != null && __isset.orderList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderList: ");
          __sb.Append(OrderList);
        }
        if (Ownerid != null && __isset.ownerid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ownerid: ");
          __sb.Append(Ownerid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConvertCMSCode_result : TBase
    {
      private List<PreparedOrder> _success;
      private ReturnMessage _retMsg;

      public List<PreparedOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public ConvertCMSCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<PreparedOrder>();
                    TList _list32 = iprot.ReadListBegin();
                    for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                    {
                      PreparedOrder _elem34;
                      _elem34 = new PreparedOrder();
                      _elem34.Read(iprot);
                      Success.Add(_elem34);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConvertCMSCode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (PreparedOrder _iter35 in Success)
                {
                  _iter35.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConvertCMSCode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelMatch_args : TBase
    {
      private string _relID;

      public string RelID
      {
        get
        {
          return _relID;
        }
        set
        {
          __isset.relID = true;
          this._relID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool relID;
      }

      public DelMatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  RelID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DelMatch_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (RelID != null && __isset.relID) {
            field.Name = "relID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(RelID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelMatch_args(");
        bool __first = true;
        if (RelID != null && __isset.relID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RelID: ");
          __sb.Append(RelID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelMatch_result : TBase
    {
      private long _success;
      private ReturnMessage _retMsg;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public DelMatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DelMatch_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DelMatch_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddBidHistroy_args : TBase
    {
      private BidOper _oper;

      public BidOper Oper
      {
        get
        {
          return _oper;
        }
        set
        {
          __isset.oper = true;
          this._oper = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool oper;
      }

      public AddBidHistroy_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Oper = new BidOper();
                  Oper.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AddBidHistroy_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Oper != null && __isset.oper) {
            field.Name = "oper";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Oper.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddBidHistroy_args(");
        bool __first = true;
        if (Oper != null && __isset.oper) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Oper: ");
          __sb.Append(Oper== null ? "<null>" : Oper.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddBidHistroy_result : TBase
    {
      private long _success;
      private ReturnMessage _retMsg;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public AddBidHistroy_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AddBidHistroy_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AddBidHistroy_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PreviewOrder_args : TBase
    {
      private List<PreparedOrder> _orderList;
      private OrderCustomer _customer;

      public List<PreparedOrder> OrderList
      {
        get
        {
          return _orderList;
        }
        set
        {
          __isset.orderList = true;
          this._orderList = value;
        }
      }

      public OrderCustomer Customer
      {
        get
        {
          return _customer;
        }
        set
        {
          __isset.customer = true;
          this._customer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool orderList;
        public bool customer;
      }

      public PreviewOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    OrderList = new List<PreparedOrder>();
                    TList _list36 = iprot.ReadListBegin();
                    for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                    {
                      PreparedOrder _elem38;
                      _elem38 = new PreparedOrder();
                      _elem38.Read(iprot);
                      OrderList.Add(_elem38);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Customer = new OrderCustomer();
                  Customer.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PreviewOrder_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderList != null && __isset.orderList) {
            field.Name = "orderList";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, OrderList.Count));
              foreach (PreparedOrder _iter39 in OrderList)
              {
                _iter39.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Customer != null && __isset.customer) {
            field.Name = "customer";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Customer.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PreviewOrder_args(");
        bool __first = true;
        if (OrderList != null && __isset.orderList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderList: ");
          __sb.Append(OrderList);
        }
        if (Customer != null && __isset.customer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer: ");
          __sb.Append(Customer== null ? "<null>" : Customer.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PreviewOrder_result : TBase
    {
      private List<PreparedOrder> _success;
      private ReturnMessage _retMsg;

      public List<PreparedOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public PreviewOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<PreparedOrder>();
                    TList _list40 = iprot.ReadListBegin();
                    for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                    {
                      PreparedOrder _elem42;
                      _elem42 = new PreparedOrder();
                      _elem42.Read(iprot);
                      Success.Add(_elem42);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PreviewOrder_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (PreparedOrder _iter43 in Success)
                {
                  _iter43.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PreviewOrder_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertOrder_args : TBase
    {
      private ContractHeader _orderHeader;
      private string _empID;

      public ContractHeader OrderHeader
      {
        get
        {
          return _orderHeader;
        }
        set
        {
          __isset.orderHeader = true;
          this._orderHeader = value;
        }
      }

      public string EmpID
      {
        get
        {
          return _empID;
        }
        set
        {
          __isset.empID = true;
          this._empID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool orderHeader;
        public bool empID;
      }

      public InsertOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  OrderHeader = new ContractHeader();
                  OrderHeader.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EmpID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InsertOrder_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderHeader != null && __isset.orderHeader) {
            field.Name = "orderHeader";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            OrderHeader.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (EmpID != null && __isset.empID) {
            field.Name = "empID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EmpID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InsertOrder_args(");
        bool __first = true;
        if (OrderHeader != null && __isset.orderHeader) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderHeader: ");
          __sb.Append(OrderHeader== null ? "<null>" : OrderHeader.ToString());
        }
        if (EmpID != null && __isset.empID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmpID: ");
          __sb.Append(EmpID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertOrder_result : TBase
    {
      private List<long> _success;
      private ReturnMessage _retMsg;

      public List<long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public InsertOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<long>();
                    TList _list44 = iprot.ReadListBegin();
                    for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                    {
                      long _elem46;
                      _elem46 = iprot.ReadI64();
                      Success.Add(_elem46);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InsertOrder_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.I64, Success.Count));
                foreach (long _iter47 in Success)
                {
                  oprot.WriteI64(_iter47);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InsertOrder_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetOrderCustomer_args : TBase
    {
      private OrderCustomer _customer;

      public OrderCustomer Customer
      {
        get
        {
          return _customer;
        }
        set
        {
          __isset.customer = true;
          this._customer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customer;
      }

      public GetOrderCustomer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Customer = new OrderCustomer();
                  Customer.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetOrderCustomer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Customer != null && __isset.customer) {
            field.Name = "customer";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Customer.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetOrderCustomer_args(");
        bool __first = true;
        if (Customer != null && __isset.customer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer: ");
          __sb.Append(Customer== null ? "<null>" : Customer.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetOrderCustomer_result : TBase
    {
      private OrderCustomer _success;
      private ReturnMessage _retMsg;

      public OrderCustomer Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public GetOrderCustomer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new OrderCustomer();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetOrderCustomer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetOrderCustomer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDataDict_args : TBase
    {
      private string _dictType;

      public string DictType
      {
        get
        {
          return _dictType;
        }
        set
        {
          __isset.dictType = true;
          this._dictType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dictType;
      }

      public GetDataDict_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  DictType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetDataDict_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DictType != null && __isset.dictType) {
            field.Name = "dictType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DictType);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDataDict_args(");
        bool __first = true;
        if (DictType != null && __isset.dictType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DictType: ");
          __sb.Append(DictType);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDataDict_result : TBase
    {
      private List<KVPair> _success;
      private ReturnMessage _retMsg;

      public List<KVPair> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public GetDataDict_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<KVPair>();
                    TList _list48 = iprot.ReadListBegin();
                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                    {
                      KVPair _elem50;
                      _elem50 = new KVPair();
                      _elem50.Read(iprot);
                      Success.Add(_elem50);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetDataDict_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (KVPair _iter51 in Success)
                {
                  _iter51.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDataDict_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSendAddrs_args : TBase
    {
      private string _cstID;

      public string CstID
      {
        get
        {
          return _cstID;
        }
        set
        {
          __isset.cstID = true;
          this._cstID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cstID;
      }

      public GetSendAddrs_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CstID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSendAddrs_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CstID != null && __isset.cstID) {
            field.Name = "cstID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CstID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSendAddrs_args(");
        bool __first = true;
        if (CstID != null && __isset.cstID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CstID: ");
          __sb.Append(CstID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSendAddrs_result : TBase
    {
      private List<KVPair> _success;
      private ReturnMessage _retMsg;

      public List<KVPair> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public GetSendAddrs_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<KVPair>();
                    TList _list52 = iprot.ReadListBegin();
                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                    {
                      KVPair _elem54;
                      _elem54 = new KVPair();
                      _elem54.Read(iprot);
                      Success.Add(_elem54);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSendAddrs_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (KVPair _iter55 in Success)
                {
                  _iter55.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSendAddrs_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStockDetail_args : TBase
    {
      private OrderCustomer _customer;
      private string _goodid;

      public OrderCustomer Customer
      {
        get
        {
          return _customer;
        }
        set
        {
          __isset.customer = true;
          this._customer = value;
        }
      }

      public string Goodid
      {
        get
        {
          return _goodid;
        }
        set
        {
          __isset.goodid = true;
          this._goodid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool customer;
        public bool goodid;
      }

      public GetStockDetail_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Customer = new OrderCustomer();
                  Customer.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Goodid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetStockDetail_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Customer != null && __isset.customer) {
            field.Name = "customer";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Customer.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Goodid != null && __isset.goodid) {
            field.Name = "goodid";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Goodid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStockDetail_args(");
        bool __first = true;
        if (Customer != null && __isset.customer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer: ");
          __sb.Append(Customer== null ? "<null>" : Customer.ToString());
        }
        if (Goodid != null && __isset.goodid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Goodid: ");
          __sb.Append(Goodid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStockDetail_result : TBase
    {
      private List<StockDetail> _success;
      private ReturnMessage _retMsg;

      public List<StockDetail> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public GetStockDetail_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<StockDetail>();
                    TList _list56 = iprot.ReadListBegin();
                    for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                    {
                      StockDetail _elem58;
                      _elem58 = new StockDetail();
                      _elem58.Read(iprot);
                      Success.Add(_elem58);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetStockDetail_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (StockDetail _iter59 in Success)
                {
                  _iter59.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStockDetail_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VerifyOrder_args : TBase
    {
      private ContractHeader _orderHeader;
      private string _empID;

      public ContractHeader OrderHeader
      {
        get
        {
          return _orderHeader;
        }
        set
        {
          __isset.orderHeader = true;
          this._orderHeader = value;
        }
      }

      public string EmpID
      {
        get
        {
          return _empID;
        }
        set
        {
          __isset.empID = true;
          this._empID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool orderHeader;
        public bool empID;
      }

      public VerifyOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  OrderHeader = new ContractHeader();
                  OrderHeader.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EmpID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VerifyOrder_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderHeader != null && __isset.orderHeader) {
            field.Name = "orderHeader";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            OrderHeader.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (EmpID != null && __isset.empID) {
            field.Name = "empID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EmpID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VerifyOrder_args(");
        bool __first = true;
        if (OrderHeader != null && __isset.orderHeader) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderHeader: ");
          __sb.Append(OrderHeader== null ? "<null>" : OrderHeader.ToString());
        }
        if (EmpID != null && __isset.empID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmpID: ");
          __sb.Append(EmpID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VerifyOrder_result : TBase
    {
      private List<string> _success;
      private ReturnMessage _retMsg;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public VerifyOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list60 = iprot.ReadListBegin();
                    for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                    {
                      string _elem62;
                      _elem62 = iprot.ReadString();
                      Success.Add(_elem62);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VerifyOrder_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter63 in Success)
                {
                  oprot.WriteString(_iter63);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VerifyOrder_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangePassword_args : TBase
    {
      private string _userCode;
      private string _oldPass;
      private string _newPass;

      public string UserCode
      {
        get
        {
          return _userCode;
        }
        set
        {
          __isset.userCode = true;
          this._userCode = value;
        }
      }

      public string OldPass
      {
        get
        {
          return _oldPass;
        }
        set
        {
          __isset.oldPass = true;
          this._oldPass = value;
        }
      }

      public string NewPass
      {
        get
        {
          return _newPass;
        }
        set
        {
          __isset.newPass = true;
          this._newPass = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userCode;
        public bool oldPass;
        public bool newPass;
      }

      public ChangePassword_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserCode = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  OldPass = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  NewPass = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ChangePassword_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserCode != null && __isset.userCode) {
            field.Name = "userCode";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserCode);
            oprot.WriteFieldEnd();
          }
          if (OldPass != null && __isset.oldPass) {
            field.Name = "oldPass";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OldPass);
            oprot.WriteFieldEnd();
          }
          if (NewPass != null && __isset.newPass) {
            field.Name = "newPass";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NewPass);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ChangePassword_args(");
        bool __first = true;
        if (UserCode != null && __isset.userCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserCode: ");
          __sb.Append(UserCode);
        }
        if (OldPass != null && __isset.oldPass) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OldPass: ");
          __sb.Append(OldPass);
        }
        if (NewPass != null && __isset.newPass) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NewPass: ");
          __sb.Append(NewPass);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ChangePassword_result : TBase
    {
      private int _success;
      private ReturnMessage _retMsg;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public ChangePassword_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ChangePassword_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ChangePassword_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
