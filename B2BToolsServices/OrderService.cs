/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{
  public partial class OrderService {
    public interface ISync {
      List<PreparedOrder> PreparedOrder(List<GenesisOrder> orderList, OrderCustomer customer);
      List<long> InsertOrder(ContractHeader orderHeader, string empID);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_PreparedOrder(AsyncCallback callback, object state, List<GenesisOrder> orderList, OrderCustomer customer);
      List<PreparedOrder> End_PreparedOrder(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_InsertOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID);
      List<long> End_InsertOrder(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_PreparedOrder(AsyncCallback callback, object state, List<GenesisOrder> orderList, OrderCustomer customer)
      {
        return send_PreparedOrder(callback, state, orderList, customer);
      }

      public List<PreparedOrder> End_PreparedOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PreparedOrder();
      }

      #endif

      public List<PreparedOrder> PreparedOrder(List<GenesisOrder> orderList, OrderCustomer customer)
      {
        #if !SILVERLIGHT
        send_PreparedOrder(orderList, customer);
        return recv_PreparedOrder();

        #else
        var asyncResult = Begin_PreparedOrder(null, null, orderList, customer);
        return End_PreparedOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PreparedOrder(AsyncCallback callback, object state, List<GenesisOrder> orderList, OrderCustomer customer)
      #else
      public void send_PreparedOrder(List<GenesisOrder> orderList, OrderCustomer customer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PreparedOrder", TMessageType.Call, seqid_));
        PreparedOrder_args args = new PreparedOrder_args();
        args.OrderList = orderList;
        args.Customer = customer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<PreparedOrder> recv_PreparedOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PreparedOrder_result result = new PreparedOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PreparedOrder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_InsertOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID)
      {
        return send_InsertOrder(callback, state, orderHeader, empID);
      }

      public List<long> End_InsertOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_InsertOrder();
      }

      #endif

      public List<long> InsertOrder(ContractHeader orderHeader, string empID)
      {
        #if !SILVERLIGHT
        send_InsertOrder(orderHeader, empID);
        return recv_InsertOrder();

        #else
        var asyncResult = Begin_InsertOrder(null, null, orderHeader, empID);
        return End_InsertOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_InsertOrder(AsyncCallback callback, object state, ContractHeader orderHeader, string empID)
      #else
      public void send_InsertOrder(ContractHeader orderHeader, string empID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("InsertOrder", TMessageType.Call, seqid_));
        InsertOrder_args args = new InsertOrder_args();
        args.OrderHeader = orderHeader;
        args.EmpID = empID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<long> recv_InsertOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InsertOrder_result result = new InsertOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.retMsg) {
          throw result.RetMsg;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "InsertOrder failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["PreparedOrder"] = PreparedOrder_Process;
        processMap_["InsertOrder"] = InsertOrder_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void PreparedOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PreparedOrder_args args = new PreparedOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PreparedOrder_result result = new PreparedOrder_result();
        try
        {
          try
          {
            result.Success = iface_.PreparedOrder(args.OrderList, args.Customer);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("PreparedOrder", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PreparedOrder", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void InsertOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InsertOrder_args args = new InsertOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InsertOrder_result result = new InsertOrder_result();
        try
        {
          try
          {
            result.Success = iface_.InsertOrder(args.OrderHeader, args.EmpID);
          }
          catch (ReturnMessage retMsg)
          {
            result.RetMsg = retMsg;
          }
          oprot.WriteMessageBegin(new TMessage("InsertOrder", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("InsertOrder", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PreparedOrder_args : TBase
    {
      private List<GenesisOrder> _orderList;
      private OrderCustomer _customer;

      public List<GenesisOrder> OrderList
      {
        get
        {
          return _orderList;
        }
        set
        {
          __isset.orderList = true;
          this._orderList = value;
        }
      }

      public OrderCustomer Customer
      {
        get
        {
          return _customer;
        }
        set
        {
          __isset.customer = true;
          this._customer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool orderList;
        public bool customer;
      }

      public PreparedOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    OrderList = new List<GenesisOrder>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      GenesisOrder _elem2;
                      _elem2 = new GenesisOrder();
                      _elem2.Read(iprot);
                      OrderList.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Customer = new OrderCustomer();
                  Customer.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PreparedOrder_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderList != null && __isset.orderList) {
            field.Name = "orderList";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, OrderList.Count));
              foreach (GenesisOrder _iter3 in OrderList)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Customer != null && __isset.customer) {
            field.Name = "customer";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Customer.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PreparedOrder_args(");
        bool __first = true;
        if (OrderList != null && __isset.orderList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderList: ");
          __sb.Append(OrderList);
        }
        if (Customer != null && __isset.customer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Customer: ");
          __sb.Append(Customer== null ? "<null>" : Customer.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PreparedOrder_result : TBase
    {
      private List<PreparedOrder> _success;
      private ReturnMessage _retMsg;

      public List<PreparedOrder> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public PreparedOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<PreparedOrder>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      PreparedOrder _elem6;
                      _elem6 = new PreparedOrder();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PreparedOrder_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (PreparedOrder _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PreparedOrder_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertOrder_args : TBase
    {
      private ContractHeader _orderHeader;
      private string _empID;

      public ContractHeader OrderHeader
      {
        get
        {
          return _orderHeader;
        }
        set
        {
          __isset.orderHeader = true;
          this._orderHeader = value;
        }
      }

      public string EmpID
      {
        get
        {
          return _empID;
        }
        set
        {
          __isset.empID = true;
          this._empID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool orderHeader;
        public bool empID;
      }

      public InsertOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  OrderHeader = new ContractHeader();
                  OrderHeader.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EmpID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InsertOrder_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderHeader != null && __isset.orderHeader) {
            field.Name = "orderHeader";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            OrderHeader.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (EmpID != null && __isset.empID) {
            field.Name = "empID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EmpID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InsertOrder_args(");
        bool __first = true;
        if (OrderHeader != null && __isset.orderHeader) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderHeader: ");
          __sb.Append(OrderHeader== null ? "<null>" : OrderHeader.ToString());
        }
        if (EmpID != null && __isset.empID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmpID: ");
          __sb.Append(EmpID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InsertOrder_result : TBase
    {
      private List<long> _success;
      private ReturnMessage _retMsg;

      public List<long> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ReturnMessage RetMsg
      {
        get
        {
          return _retMsg;
        }
        set
        {
          __isset.retMsg = true;
          this._retMsg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool retMsg;
      }

      public InsertOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<long>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      long _elem10;
                      _elem10 = iprot.ReadI64();
                      Success.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  RetMsg = new ReturnMessage();
                  RetMsg.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InsertOrder_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.I64, Success.Count));
                foreach (long _iter11 in Success)
                {
                  oprot.WriteI64(_iter11);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.retMsg) {
            if (RetMsg != null) {
              field.Name = "RetMsg";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              RetMsg.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InsertOrder_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (RetMsg != null && __isset.retMsg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RetMsg: ");
          __sb.Append(RetMsg== null ? "<null>" : RetMsg.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
