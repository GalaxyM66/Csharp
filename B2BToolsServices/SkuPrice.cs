/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SkuPrice : TBase
  {
    private string _hxStock;
    private string _hxStockValidDate;
    private string _gkStock;
    private string _gkStockValidDate;
    private string _b2bSaleFlag;
    private string _cmsSaleFlag;
    private string _b2bKpiPrice;
    private string _cmsKpiPrice;
    private string _lastPrice;
    private string _lastPriceDate;
    private string _kpiPrice;
    private string _bidPrice;
    private string _bidProfitRatio;
    private string _hxStockPrdDate;
    private string _gkStockPrdDate;
    private string _cmsSkuCategory;

    public string CmsSkuCode { get; set; }

    public string CmsSkuName { get; set; }

    public string CmsSkuSpec { get; set; }

    public string CmsSkuFactory { get; set; }

    public string CmsABCType { get; set; }

    public string RespBuyer { get; set; }

    public string LastSalePrice { get; set; }

    public string LastSaleTime { get; set; }

    public string CmsPrice { get; set; }

    public string B2bPrice { get; set; }

    public string B2bPriceType { get; set; }

    public string ConversionRatio { get; set; }

    public string HxStock
    {
      get
      {
        return _hxStock;
      }
      set
      {
        __isset.hxStock = true;
        this._hxStock = value;
      }
    }

    public string HxStockValidDate
    {
      get
      {
        return _hxStockValidDate;
      }
      set
      {
        __isset.hxStockValidDate = true;
        this._hxStockValidDate = value;
      }
    }

    public string GkStock
    {
      get
      {
        return _gkStock;
      }
      set
      {
        __isset.gkStock = true;
        this._gkStock = value;
      }
    }

    public string GkStockValidDate
    {
      get
      {
        return _gkStockValidDate;
      }
      set
      {
        __isset.gkStockValidDate = true;
        this._gkStockValidDate = value;
      }
    }

    public string CmsSkuID { get; set; }

    public string CmsLimitCstType { get; set; }

    public string CmsLimitCstArea { get; set; }

    public string CmsForbitArea { get; set; }

    public string B2bSaleFlag
    {
      get
      {
        return _b2bSaleFlag;
      }
      set
      {
        __isset.b2bSaleFlag = true;
        this._b2bSaleFlag = value;
      }
    }

    public string CmsSaleFlag
    {
      get
      {
        return _cmsSaleFlag;
      }
      set
      {
        __isset.cmsSaleFlag = true;
        this._cmsSaleFlag = value;
      }
    }

    public string B2bKpiPrice
    {
      get
      {
        return _b2bKpiPrice;
      }
      set
      {
        __isset.b2bKpiPrice = true;
        this._b2bKpiPrice = value;
      }
    }

    public string CmsKpiPrice
    {
      get
      {
        return _cmsKpiPrice;
      }
      set
      {
        __isset.cmsKpiPrice = true;
        this._cmsKpiPrice = value;
      }
    }

    public string LastPrice
    {
      get
      {
        return _lastPrice;
      }
      set
      {
        __isset.lastPrice = true;
        this._lastPrice = value;
      }
    }

    public string LastPriceDate
    {
      get
      {
        return _lastPriceDate;
      }
      set
      {
        __isset.lastPriceDate = true;
        this._lastPriceDate = value;
      }
    }

    public string KpiPrice
    {
      get
      {
        return _kpiPrice;
      }
      set
      {
        __isset.kpiPrice = true;
        this._kpiPrice = value;
      }
    }

    public string ProfitRatio { get; set; }

    public string BidPrice
    {
      get
      {
        return _bidPrice;
      }
      set
      {
        __isset.bidPrice = true;
        this._bidPrice = value;
      }
    }

    public string BidProfitRatio
    {
      get
      {
        return _bidProfitRatio;
      }
      set
      {
        __isset.bidProfitRatio = true;
        this._bidProfitRatio = value;
      }
    }

    public string HxStockPrdDate
    {
      get
      {
        return _hxStockPrdDate;
      }
      set
      {
        __isset.hxStockPrdDate = true;
        this._hxStockPrdDate = value;
      }
    }

    public string GkStockPrdDate
    {
      get
      {
        return _gkStockPrdDate;
      }
      set
      {
        __isset.gkStockPrdDate = true;
        this._gkStockPrdDate = value;
      }
    }

    public string CmsSkuCategory
    {
      get
      {
        return _cmsSkuCategory;
      }
      set
      {
        __isset.cmsSkuCategory = true;
        this._cmsSkuCategory = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool hxStock;
      public bool hxStockValidDate;
      public bool gkStock;
      public bool gkStockValidDate;
      public bool b2bSaleFlag;
      public bool cmsSaleFlag;
      public bool b2bKpiPrice;
      public bool cmsKpiPrice;
      public bool lastPrice;
      public bool lastPriceDate;
      public bool kpiPrice;
      public bool bidPrice;
      public bool bidProfitRatio;
      public bool hxStockPrdDate;
      public bool gkStockPrdDate;
      public bool cmsSkuCategory;
    }

    public SkuPrice() {
    }

    public SkuPrice(string cmsSkuCode, string cmsSkuName, string cmsSkuSpec, string cmsSkuFactory, string cmsABCType, string respBuyer, string lastSalePrice, string lastSaleTime, string cmsPrice, string b2bPrice, string b2bPriceType, string conversionRatio, string cmsSkuID, string cmsLimitCstType, string cmsLimitCstArea, string cmsForbitArea, string profitRatio) : this() {
      this.CmsSkuCode = cmsSkuCode;
      this.CmsSkuName = cmsSkuName;
      this.CmsSkuSpec = cmsSkuSpec;
      this.CmsSkuFactory = cmsSkuFactory;
      this.CmsABCType = cmsABCType;
      this.RespBuyer = respBuyer;
      this.LastSalePrice = lastSalePrice;
      this.LastSaleTime = lastSaleTime;
      this.CmsPrice = cmsPrice;
      this.B2bPrice = b2bPrice;
      this.B2bPriceType = b2bPriceType;
      this.ConversionRatio = conversionRatio;
      this.CmsSkuID = cmsSkuID;
      this.CmsLimitCstType = cmsLimitCstType;
      this.CmsLimitCstArea = cmsLimitCstArea;
      this.CmsForbitArea = cmsForbitArea;
      this.ProfitRatio = profitRatio;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_cmsSkuCode = false;
        bool isset_cmsSkuName = false;
        bool isset_cmsSkuSpec = false;
        bool isset_cmsSkuFactory = false;
        bool isset_cmsABCType = false;
        bool isset_respBuyer = false;
        bool isset_lastSalePrice = false;
        bool isset_lastSaleTime = false;
        bool isset_cmsPrice = false;
        bool isset_b2bPrice = false;
        bool isset_b2bPriceType = false;
        bool isset_conversionRatio = false;
        bool isset_cmsSkuID = false;
        bool isset_cmsLimitCstType = false;
        bool isset_cmsLimitCstArea = false;
        bool isset_cmsForbitArea = false;
        bool isset_profitRatio = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CmsSkuCode = iprot.ReadString();
                isset_cmsSkuCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CmsSkuName = iprot.ReadString();
                isset_cmsSkuName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CmsSkuSpec = iprot.ReadString();
                isset_cmsSkuSpec = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                CmsSkuFactory = iprot.ReadString();
                isset_cmsSkuFactory = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                CmsABCType = iprot.ReadString();
                isset_cmsABCType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                RespBuyer = iprot.ReadString();
                isset_respBuyer = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                LastSalePrice = iprot.ReadString();
                isset_lastSalePrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                LastSaleTime = iprot.ReadString();
                isset_lastSaleTime = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                CmsPrice = iprot.ReadString();
                isset_cmsPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                B2bPrice = iprot.ReadString();
                isset_b2bPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                B2bPriceType = iprot.ReadString();
                isset_b2bPriceType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                ConversionRatio = iprot.ReadString();
                isset_conversionRatio = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                HxStock = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                HxStockValidDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                GkStock = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                GkStockValidDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                CmsSkuID = iprot.ReadString();
                isset_cmsSkuID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.String) {
                CmsLimitCstType = iprot.ReadString();
                isset_cmsLimitCstType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.String) {
                CmsLimitCstArea = iprot.ReadString();
                isset_cmsLimitCstArea = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.String) {
                CmsForbitArea = iprot.ReadString();
                isset_cmsForbitArea = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.String) {
                B2bSaleFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 27:
              if (field.Type == TType.String) {
                CmsSaleFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.String) {
                B2bKpiPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.String) {
                CmsKpiPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                LastPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 31:
              if (field.Type == TType.String) {
                LastPriceDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 35:
              if (field.Type == TType.String) {
                KpiPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 36:
              if (field.Type == TType.String) {
                ProfitRatio = iprot.ReadString();
                isset_profitRatio = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 37:
              if (field.Type == TType.String) {
                BidPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 38:
              if (field.Type == TType.String) {
                BidProfitRatio = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 39:
              if (field.Type == TType.String) {
                HxStockPrdDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.String) {
                GkStockPrdDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 41:
              if (field.Type == TType.String) {
                CmsSkuCategory = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_cmsSkuCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuSpec)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuFactory)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsABCType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_respBuyer)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_lastSalePrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_lastSaleTime)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_b2bPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_b2bPriceType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_conversionRatio)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsLimitCstType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsLimitCstArea)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsForbitArea)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_profitRatio)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SkuPrice");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "cmsSkuCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuCode);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuName);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuSpec";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuSpec);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuFactory";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuFactory);
        oprot.WriteFieldEnd();
        field.Name = "cmsABCType";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsABCType);
        oprot.WriteFieldEnd();
        field.Name = "respBuyer";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RespBuyer);
        oprot.WriteFieldEnd();
        field.Name = "lastSalePrice";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastSalePrice);
        oprot.WriteFieldEnd();
        field.Name = "lastSaleTime";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LastSaleTime);
        oprot.WriteFieldEnd();
        field.Name = "cmsPrice";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsPrice);
        oprot.WriteFieldEnd();
        field.Name = "b2bPrice";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(B2bPrice);
        oprot.WriteFieldEnd();
        field.Name = "b2bPriceType";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(B2bPriceType);
        oprot.WriteFieldEnd();
        field.Name = "conversionRatio";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ConversionRatio);
        oprot.WriteFieldEnd();
        if (HxStock != null && __isset.hxStock) {
          field.Name = "hxStock";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(HxStock);
          oprot.WriteFieldEnd();
        }
        if (HxStockValidDate != null && __isset.hxStockValidDate) {
          field.Name = "hxStockValidDate";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(HxStockValidDate);
          oprot.WriteFieldEnd();
        }
        if (GkStock != null && __isset.gkStock) {
          field.Name = "gkStock";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GkStock);
          oprot.WriteFieldEnd();
        }
        if (GkStockValidDate != null && __isset.gkStockValidDate) {
          field.Name = "gkStockValidDate";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GkStockValidDate);
          oprot.WriteFieldEnd();
        }
        field.Name = "cmsSkuID";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuID);
        oprot.WriteFieldEnd();
        field.Name = "cmsLimitCstType";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsLimitCstType);
        oprot.WriteFieldEnd();
        field.Name = "cmsLimitCstArea";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsLimitCstArea);
        oprot.WriteFieldEnd();
        field.Name = "cmsForbitArea";
        field.Type = TType.String;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsForbitArea);
        oprot.WriteFieldEnd();
        if (B2bSaleFlag != null && __isset.b2bSaleFlag) {
          field.Name = "b2bSaleFlag";
          field.Type = TType.String;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(B2bSaleFlag);
          oprot.WriteFieldEnd();
        }
        if (CmsSaleFlag != null && __isset.cmsSaleFlag) {
          field.Name = "cmsSaleFlag";
          field.Type = TType.String;
          field.ID = 27;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSaleFlag);
          oprot.WriteFieldEnd();
        }
        if (B2bKpiPrice != null && __isset.b2bKpiPrice) {
          field.Name = "b2bKpiPrice";
          field.Type = TType.String;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(B2bKpiPrice);
          oprot.WriteFieldEnd();
        }
        if (CmsKpiPrice != null && __isset.cmsKpiPrice) {
          field.Name = "cmsKpiPrice";
          field.Type = TType.String;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsKpiPrice);
          oprot.WriteFieldEnd();
        }
        if (LastPrice != null && __isset.lastPrice) {
          field.Name = "lastPrice";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastPrice);
          oprot.WriteFieldEnd();
        }
        if (LastPriceDate != null && __isset.lastPriceDate) {
          field.Name = "lastPriceDate";
          field.Type = TType.String;
          field.ID = 31;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastPriceDate);
          oprot.WriteFieldEnd();
        }
        if (KpiPrice != null && __isset.kpiPrice) {
          field.Name = "kpiPrice";
          field.Type = TType.String;
          field.ID = 35;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(KpiPrice);
          oprot.WriteFieldEnd();
        }
        field.Name = "profitRatio";
        field.Type = TType.String;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProfitRatio);
        oprot.WriteFieldEnd();
        if (BidPrice != null && __isset.bidPrice) {
          field.Name = "bidPrice";
          field.Type = TType.String;
          field.ID = 37;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BidPrice);
          oprot.WriteFieldEnd();
        }
        if (BidProfitRatio != null && __isset.bidProfitRatio) {
          field.Name = "bidProfitRatio";
          field.Type = TType.String;
          field.ID = 38;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BidProfitRatio);
          oprot.WriteFieldEnd();
        }
        if (HxStockPrdDate != null && __isset.hxStockPrdDate) {
          field.Name = "hxStockPrdDate";
          field.Type = TType.String;
          field.ID = 39;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(HxStockPrdDate);
          oprot.WriteFieldEnd();
        }
        if (GkStockPrdDate != null && __isset.gkStockPrdDate) {
          field.Name = "gkStockPrdDate";
          field.Type = TType.String;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GkStockPrdDate);
          oprot.WriteFieldEnd();
        }
        if (CmsSkuCategory != null && __isset.cmsSkuCategory) {
          field.Name = "cmsSkuCategory";
          field.Type = TType.String;
          field.ID = 41;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSkuCategory);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SkuPrice(");
      __sb.Append(", CmsSkuCode: ");
      __sb.Append(CmsSkuCode);
      __sb.Append(", CmsSkuName: ");
      __sb.Append(CmsSkuName);
      __sb.Append(", CmsSkuSpec: ");
      __sb.Append(CmsSkuSpec);
      __sb.Append(", CmsSkuFactory: ");
      __sb.Append(CmsSkuFactory);
      __sb.Append(", CmsABCType: ");
      __sb.Append(CmsABCType);
      __sb.Append(", RespBuyer: ");
      __sb.Append(RespBuyer);
      __sb.Append(", LastSalePrice: ");
      __sb.Append(LastSalePrice);
      __sb.Append(", LastSaleTime: ");
      __sb.Append(LastSaleTime);
      __sb.Append(", CmsPrice: ");
      __sb.Append(CmsPrice);
      __sb.Append(", B2bPrice: ");
      __sb.Append(B2bPrice);
      __sb.Append(", B2bPriceType: ");
      __sb.Append(B2bPriceType);
      __sb.Append(", ConversionRatio: ");
      __sb.Append(ConversionRatio);
      if (HxStock != null && __isset.hxStock) {
        __sb.Append(", HxStock: ");
        __sb.Append(HxStock);
      }
      if (HxStockValidDate != null && __isset.hxStockValidDate) {
        __sb.Append(", HxStockValidDate: ");
        __sb.Append(HxStockValidDate);
      }
      if (GkStock != null && __isset.gkStock) {
        __sb.Append(", GkStock: ");
        __sb.Append(GkStock);
      }
      if (GkStockValidDate != null && __isset.gkStockValidDate) {
        __sb.Append(", GkStockValidDate: ");
        __sb.Append(GkStockValidDate);
      }
      __sb.Append(", CmsSkuID: ");
      __sb.Append(CmsSkuID);
      __sb.Append(", CmsLimitCstType: ");
      __sb.Append(CmsLimitCstType);
      __sb.Append(", CmsLimitCstArea: ");
      __sb.Append(CmsLimitCstArea);
      __sb.Append(", CmsForbitArea: ");
      __sb.Append(CmsForbitArea);
      if (B2bSaleFlag != null && __isset.b2bSaleFlag) {
        __sb.Append(", B2bSaleFlag: ");
        __sb.Append(B2bSaleFlag);
      }
      if (CmsSaleFlag != null && __isset.cmsSaleFlag) {
        __sb.Append(", CmsSaleFlag: ");
        __sb.Append(CmsSaleFlag);
      }
      if (B2bKpiPrice != null && __isset.b2bKpiPrice) {
        __sb.Append(", B2bKpiPrice: ");
        __sb.Append(B2bKpiPrice);
      }
      if (CmsKpiPrice != null && __isset.cmsKpiPrice) {
        __sb.Append(", CmsKpiPrice: ");
        __sb.Append(CmsKpiPrice);
      }
      if (LastPrice != null && __isset.lastPrice) {
        __sb.Append(", LastPrice: ");
        __sb.Append(LastPrice);
      }
      if (LastPriceDate != null && __isset.lastPriceDate) {
        __sb.Append(", LastPriceDate: ");
        __sb.Append(LastPriceDate);
      }
      if (KpiPrice != null && __isset.kpiPrice) {
        __sb.Append(", KpiPrice: ");
        __sb.Append(KpiPrice);
      }
      __sb.Append(", ProfitRatio: ");
      __sb.Append(ProfitRatio);
      if (BidPrice != null && __isset.bidPrice) {
        __sb.Append(", BidPrice: ");
        __sb.Append(BidPrice);
      }
      if (BidProfitRatio != null && __isset.bidProfitRatio) {
        __sb.Append(", BidProfitRatio: ");
        __sb.Append(BidProfitRatio);
      }
      if (HxStockPrdDate != null && __isset.hxStockPrdDate) {
        __sb.Append(", HxStockPrdDate: ");
        __sb.Append(HxStockPrdDate);
      }
      if (GkStockPrdDate != null && __isset.gkStockPrdDate) {
        __sb.Append(", GkStockPrdDate: ");
        __sb.Append(GkStockPrdDate);
      }
      if (CmsSkuCategory != null && __isset.cmsSkuCategory) {
        __sb.Append(", CmsSkuCategory: ");
        __sb.Append(CmsSkuCategory);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
