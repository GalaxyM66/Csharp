/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GenesisOrder : TBase
  {

    public string ExtSkuCode { get; set; }

    public string ExtQuantity { get; set; }

    public string Price { get; set; }

    public string InvType { get; set; }

    public string BusiMemo { get; set; }

    public string AuditMemo { get; set; }

    public string FeedbackMemo { get; set; }

    public string DiscountAmount { get; set; }

    public GenesisOrder() {
    }

    public GenesisOrder(string extSkuCode, string extQuantity, string price, string invType, string busiMemo, string auditMemo, string feedbackMemo, string discountAmount) : this() {
      this.ExtSkuCode = extSkuCode;
      this.ExtQuantity = extQuantity;
      this.Price = price;
      this.InvType = invType;
      this.BusiMemo = busiMemo;
      this.AuditMemo = auditMemo;
      this.FeedbackMemo = feedbackMemo;
      this.DiscountAmount = discountAmount;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_extSkuCode = false;
        bool isset_extQuantity = false;
        bool isset_price = false;
        bool isset_invType = false;
        bool isset_busiMemo = false;
        bool isset_auditMemo = false;
        bool isset_feedbackMemo = false;
        bool isset_discountAmount = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ExtSkuCode = iprot.ReadString();
                isset_extSkuCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExtQuantity = iprot.ReadString();
                isset_extQuantity = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Price = iprot.ReadString();
                isset_price = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                InvType = iprot.ReadString();
                isset_invType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                BusiMemo = iprot.ReadString();
                isset_busiMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                AuditMemo = iprot.ReadString();
                isset_auditMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                FeedbackMemo = iprot.ReadString();
                isset_feedbackMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                DiscountAmount = iprot.ReadString();
                isset_discountAmount = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_extSkuCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_extQuantity)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_price)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_invType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_busiMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_auditMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_feedbackMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_discountAmount)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("GenesisOrder");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "extSkuCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtSkuCode);
        oprot.WriteFieldEnd();
        field.Name = "extQuantity";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtQuantity);
        oprot.WriteFieldEnd();
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Price);
        oprot.WriteFieldEnd();
        field.Name = "invType";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InvType);
        oprot.WriteFieldEnd();
        field.Name = "busiMemo";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BusiMemo);
        oprot.WriteFieldEnd();
        field.Name = "auditMemo";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuditMemo);
        oprot.WriteFieldEnd();
        field.Name = "feedbackMemo";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FeedbackMemo);
        oprot.WriteFieldEnd();
        field.Name = "discountAmount";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DiscountAmount);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GenesisOrder(");
      __sb.Append(", ExtSkuCode: ");
      __sb.Append(ExtSkuCode);
      __sb.Append(", ExtQuantity: ");
      __sb.Append(ExtQuantity);
      __sb.Append(", Price: ");
      __sb.Append(Price);
      __sb.Append(", InvType: ");
      __sb.Append(InvType);
      __sb.Append(", BusiMemo: ");
      __sb.Append(BusiMemo);
      __sb.Append(", AuditMemo: ");
      __sb.Append(AuditMemo);
      __sb.Append(", FeedbackMemo: ");
      __sb.Append(FeedbackMemo);
      __sb.Append(", DiscountAmount: ");
      __sb.Append(DiscountAmount);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
