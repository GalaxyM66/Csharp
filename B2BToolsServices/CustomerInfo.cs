/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CustomerInfo : TBase
  {
    private string _costID;

    public string QueryType { get; set; }

    public string CustomerClass { get; set; }

    public string CustomerID { get; set; }

    public string CustomerName { get; set; }

    public string CustomerArea1 { get; set; }

    public string CustomerArea2 { get; set; }

    public string CustomerArea3 { get; set; }

    public string CustomerType { get; set; }

    public string CustomerStatus { get; set; }

    public string CustomerAreaName { get; set; }

    public string CustomerTypeName { get; set; }

    public string OwnerID { get; set; }

    public string DeptID { get; set; }

    public string CostID
    {
      get
      {
        return _costID;
      }
      set
      {
        __isset.costID = true;
        this._costID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool costID;
    }

    public CustomerInfo() {
    }

    public CustomerInfo(string queryType, string customerClass, string customerID, string customerName, string customerArea1, string customerArea2, string customerArea3, string customerType, string customerStatus, string customerAreaName, string customerTypeName, string ownerID, string deptID) : this() {
      this.QueryType = queryType;
      this.CustomerClass = customerClass;
      this.CustomerID = customerID;
      this.CustomerName = customerName;
      this.CustomerArea1 = customerArea1;
      this.CustomerArea2 = customerArea2;
      this.CustomerArea3 = customerArea3;
      this.CustomerType = customerType;
      this.CustomerStatus = customerStatus;
      this.CustomerAreaName = customerAreaName;
      this.CustomerTypeName = customerTypeName;
      this.OwnerID = ownerID;
      this.DeptID = deptID;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_queryType = false;
        bool isset_customerClass = false;
        bool isset_customerID = false;
        bool isset_customerName = false;
        bool isset_customerArea1 = false;
        bool isset_customerArea2 = false;
        bool isset_customerArea3 = false;
        bool isset_customerType = false;
        bool isset_customerStatus = false;
        bool isset_customerAreaName = false;
        bool isset_customerTypeName = false;
        bool isset_ownerID = false;
        bool isset_deptID = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                QueryType = iprot.ReadString();
                isset_queryType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CustomerClass = iprot.ReadString();
                isset_customerClass = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CustomerID = iprot.ReadString();
                isset_customerID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                CustomerName = iprot.ReadString();
                isset_customerName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                CustomerArea1 = iprot.ReadString();
                isset_customerArea1 = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                CustomerArea2 = iprot.ReadString();
                isset_customerArea2 = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                CustomerArea3 = iprot.ReadString();
                isset_customerArea3 = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                CustomerType = iprot.ReadString();
                isset_customerType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                CustomerStatus = iprot.ReadString();
                isset_customerStatus = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                CustomerAreaName = iprot.ReadString();
                isset_customerAreaName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                CustomerTypeName = iprot.ReadString();
                isset_customerTypeName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                OwnerID = iprot.ReadString();
                isset_ownerID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                DeptID = iprot.ReadString();
                isset_deptID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                CostID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_queryType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerClass)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerArea1)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerArea2)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerArea3)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerStatus)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerAreaName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerTypeName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ownerID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_deptID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CustomerInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "queryType";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(QueryType);
        oprot.WriteFieldEnd();
        field.Name = "customerClass";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerClass);
        oprot.WriteFieldEnd();
        field.Name = "customerID";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerID);
        oprot.WriteFieldEnd();
        field.Name = "customerName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerName);
        oprot.WriteFieldEnd();
        field.Name = "customerArea1";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerArea1);
        oprot.WriteFieldEnd();
        field.Name = "customerArea2";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerArea2);
        oprot.WriteFieldEnd();
        field.Name = "customerArea3";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerArea3);
        oprot.WriteFieldEnd();
        field.Name = "customerType";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerType);
        oprot.WriteFieldEnd();
        field.Name = "customerStatus";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerStatus);
        oprot.WriteFieldEnd();
        field.Name = "customerAreaName";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerAreaName);
        oprot.WriteFieldEnd();
        field.Name = "customerTypeName";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerTypeName);
        oprot.WriteFieldEnd();
        field.Name = "ownerID";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OwnerID);
        oprot.WriteFieldEnd();
        field.Name = "deptID";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeptID);
        oprot.WriteFieldEnd();
        if (CostID != null && __isset.costID) {
          field.Name = "costID";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CostID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CustomerInfo(");
      __sb.Append(", QueryType: ");
      __sb.Append(QueryType);
      __sb.Append(", CustomerClass: ");
      __sb.Append(CustomerClass);
      __sb.Append(", CustomerID: ");
      __sb.Append(CustomerID);
      __sb.Append(", CustomerName: ");
      __sb.Append(CustomerName);
      __sb.Append(", CustomerArea1: ");
      __sb.Append(CustomerArea1);
      __sb.Append(", CustomerArea2: ");
      __sb.Append(CustomerArea2);
      __sb.Append(", CustomerArea3: ");
      __sb.Append(CustomerArea3);
      __sb.Append(", CustomerType: ");
      __sb.Append(CustomerType);
      __sb.Append(", CustomerStatus: ");
      __sb.Append(CustomerStatus);
      __sb.Append(", CustomerAreaName: ");
      __sb.Append(CustomerAreaName);
      __sb.Append(", CustomerTypeName: ");
      __sb.Append(CustomerTypeName);
      __sb.Append(", OwnerID: ");
      __sb.Append(OwnerID);
      __sb.Append(", DeptID: ");
      __sb.Append(DeptID);
      if (CostID != null && __isset.costID) {
        __sb.Append(", CostID: ");
        __sb.Append(CostID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
