/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PreparedOrder : TBase
  {
    private string _extSkuName;
    private string _customerCode;
    private string _cmsSkuID;
    private string _cmsSkuCode;
    private string _cmsSkuName;
    private string _cmsSkuSpec;
    private string _cmsSkuFactory;
    private string _cmsABCType;
    private string _drugCertificate;
    private string _specialFlag;
    private string _selectedFlag;
    private string _getInvTypeID;
    private string _cmsQuantity;
    private string _amount;
    private string _credit;
    private string _transMode;
    private string _transName;
    private string _payType;
    private string _payName;
    private string _speID;
    private string _priceType;
    private string _priceID;
    private string _flootPrice;
    private string _offPrice;
    private string _kpiPrice;
    private string _originalPrice;
    private string _discountFlag;
    private string _discountPrice;
    private string _bargainType;
    private string _OUTRATE;
    private string _doublebillqty;
    private string _unexebillqty;
    private string _lastPriceDate;
    private string _invoiceTypeID;
    private string _invoiceType;
    private string _invTitleFlagID;
    private string _invTitleFlag;
    private string _bargainTypeName;
    private string _isMutiSku;
    private string _cmsSkuCategory;

    public string ExtSkuCode { get; set; }

    public string ExtQuantity { get; set; }

    public string Price { get; set; }

    public string GetInvType { get; set; }

    public string BusiMemo { get; set; }

    public string AuditMemo { get; set; }

    public string FeedbackMemo { get; set; }

    public string DiscountAmount { get; set; }

    public string ExtSkuName
    {
      get
      {
        return _extSkuName;
      }
      set
      {
        __isset.extSkuName = true;
        this._extSkuName = value;
      }
    }

    public string SkuStatus { get; set; }

    public string CustomerCode
    {
      get
      {
        return _customerCode;
      }
      set
      {
        __isset.customerCode = true;
        this._customerCode = value;
      }
    }

    public string CmsSkuID
    {
      get
      {
        return _cmsSkuID;
      }
      set
      {
        __isset.cmsSkuID = true;
        this._cmsSkuID = value;
      }
    }

    public string CmsSkuCode
    {
      get
      {
        return _cmsSkuCode;
      }
      set
      {
        __isset.cmsSkuCode = true;
        this._cmsSkuCode = value;
      }
    }

    public string CmsSkuName
    {
      get
      {
        return _cmsSkuName;
      }
      set
      {
        __isset.cmsSkuName = true;
        this._cmsSkuName = value;
      }
    }

    public string CmsSkuSpec
    {
      get
      {
        return _cmsSkuSpec;
      }
      set
      {
        __isset.cmsSkuSpec = true;
        this._cmsSkuSpec = value;
      }
    }

    public string CmsSkuFactory
    {
      get
      {
        return _cmsSkuFactory;
      }
      set
      {
        __isset.cmsSkuFactory = true;
        this._cmsSkuFactory = value;
      }
    }

    public string CmsABCType
    {
      get
      {
        return _cmsABCType;
      }
      set
      {
        __isset.cmsABCType = true;
        this._cmsABCType = value;
      }
    }

    public string DrugCertificate
    {
      get
      {
        return _drugCertificate;
      }
      set
      {
        __isset.drugCertificate = true;
        this._drugCertificate = value;
      }
    }

    public string SpecialFlag
    {
      get
      {
        return _specialFlag;
      }
      set
      {
        __isset.specialFlag = true;
        this._specialFlag = value;
      }
    }

    public string SelectedFlag
    {
      get
      {
        return _selectedFlag;
      }
      set
      {
        __isset.selectedFlag = true;
        this._selectedFlag = value;
      }
    }

    public string GetInvTypeID
    {
      get
      {
        return _getInvTypeID;
      }
      set
      {
        __isset.getInvTypeID = true;
        this._getInvTypeID = value;
      }
    }

    public string CmsQuantity
    {
      get
      {
        return _cmsQuantity;
      }
      set
      {
        __isset.cmsQuantity = true;
        this._cmsQuantity = value;
      }
    }

    public string Amount
    {
      get
      {
        return _amount;
      }
      set
      {
        __isset.amount = true;
        this._amount = value;
      }
    }

    public string Credit
    {
      get
      {
        return _credit;
      }
      set
      {
        __isset.credit = true;
        this._credit = value;
      }
    }

    public string TransMode
    {
      get
      {
        return _transMode;
      }
      set
      {
        __isset.transMode = true;
        this._transMode = value;
      }
    }

    public string TransName
    {
      get
      {
        return _transName;
      }
      set
      {
        __isset.transName = true;
        this._transName = value;
      }
    }

    public string PayType
    {
      get
      {
        return _payType;
      }
      set
      {
        __isset.payType = true;
        this._payType = value;
      }
    }

    public string PayName
    {
      get
      {
        return _payName;
      }
      set
      {
        __isset.payName = true;
        this._payName = value;
      }
    }

    public string SpeID
    {
      get
      {
        return _speID;
      }
      set
      {
        __isset.speID = true;
        this._speID = value;
      }
    }

    public string PriceType
    {
      get
      {
        return _priceType;
      }
      set
      {
        __isset.priceType = true;
        this._priceType = value;
      }
    }

    public string PriceID
    {
      get
      {
        return _priceID;
      }
      set
      {
        __isset.priceID = true;
        this._priceID = value;
      }
    }

    public string FlootPrice
    {
      get
      {
        return _flootPrice;
      }
      set
      {
        __isset.flootPrice = true;
        this._flootPrice = value;
      }
    }

    public string OffPrice
    {
      get
      {
        return _offPrice;
      }
      set
      {
        __isset.offPrice = true;
        this._offPrice = value;
      }
    }

    public string KpiPrice
    {
      get
      {
        return _kpiPrice;
      }
      set
      {
        __isset.kpiPrice = true;
        this._kpiPrice = value;
      }
    }

    public string OriginalPrice
    {
      get
      {
        return _originalPrice;
      }
      set
      {
        __isset.originalPrice = true;
        this._originalPrice = value;
      }
    }

    public string DiscountFlag
    {
      get
      {
        return _discountFlag;
      }
      set
      {
        __isset.discountFlag = true;
        this._discountFlag = value;
      }
    }

    public string DiscountPrice
    {
      get
      {
        return _discountPrice;
      }
      set
      {
        __isset.discountPrice = true;
        this._discountPrice = value;
      }
    }

    public string BargainType
    {
      get
      {
        return _bargainType;
      }
      set
      {
        __isset.bargainType = true;
        this._bargainType = value;
      }
    }

    public string OUTRATE
    {
      get
      {
        return _OUTRATE;
      }
      set
      {
        __isset.OUTRATE = true;
        this._OUTRATE = value;
      }
    }

    public string Doublebillqty
    {
      get
      {
        return _doublebillqty;
      }
      set
      {
        __isset.doublebillqty = true;
        this._doublebillqty = value;
      }
    }

    public string Unexebillqty
    {
      get
      {
        return _unexebillqty;
      }
      set
      {
        __isset.unexebillqty = true;
        this._unexebillqty = value;
      }
    }

    public string LastPriceDate
    {
      get
      {
        return _lastPriceDate;
      }
      set
      {
        __isset.lastPriceDate = true;
        this._lastPriceDate = value;
      }
    }

    public string InvoiceTypeID
    {
      get
      {
        return _invoiceTypeID;
      }
      set
      {
        __isset.invoiceTypeID = true;
        this._invoiceTypeID = value;
      }
    }

    public string InvoiceType
    {
      get
      {
        return _invoiceType;
      }
      set
      {
        __isset.invoiceType = true;
        this._invoiceType = value;
      }
    }

    public string InvTitleFlagID
    {
      get
      {
        return _invTitleFlagID;
      }
      set
      {
        __isset.invTitleFlagID = true;
        this._invTitleFlagID = value;
      }
    }

    public string InvTitleFlag
    {
      get
      {
        return _invTitleFlag;
      }
      set
      {
        __isset.invTitleFlag = true;
        this._invTitleFlag = value;
      }
    }

    public string BargainTypeName
    {
      get
      {
        return _bargainTypeName;
      }
      set
      {
        __isset.bargainTypeName = true;
        this._bargainTypeName = value;
      }
    }

    public string OutGoodsCode { get; set; }

    public string OutQuantity { get; set; }

    public string IsMutiSku
    {
      get
      {
        return _isMutiSku;
      }
      set
      {
        __isset.isMutiSku = true;
        this._isMutiSku = value;
      }
    }

    public string LineNo { get; set; }

    public string CmsSkuCategory
    {
      get
      {
        return _cmsSkuCategory;
      }
      set
      {
        __isset.cmsSkuCategory = true;
        this._cmsSkuCategory = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool extSkuName;
      public bool customerCode;
      public bool cmsSkuID;
      public bool cmsSkuCode;
      public bool cmsSkuName;
      public bool cmsSkuSpec;
      public bool cmsSkuFactory;
      public bool cmsABCType;
      public bool drugCertificate;
      public bool specialFlag;
      public bool selectedFlag;
      public bool getInvTypeID;
      public bool cmsQuantity;
      public bool amount;
      public bool credit;
      public bool transMode;
      public bool transName;
      public bool payType;
      public bool payName;
      public bool speID;
      public bool priceType;
      public bool priceID;
      public bool flootPrice;
      public bool offPrice;
      public bool kpiPrice;
      public bool originalPrice;
      public bool discountFlag;
      public bool discountPrice;
      public bool bargainType;
      public bool OUTRATE;
      public bool doublebillqty;
      public bool unexebillqty;
      public bool lastPriceDate;
      public bool invoiceTypeID;
      public bool invoiceType;
      public bool invTitleFlagID;
      public bool invTitleFlag;
      public bool bargainTypeName;
      public bool isMutiSku;
      public bool cmsSkuCategory;
    }

    public PreparedOrder() {
    }

    public PreparedOrder(string extSkuCode, string extQuantity, string price, string getInvType, string busiMemo, string auditMemo, string feedbackMemo, string discountAmount, string skuStatus, string outGoodsCode, string outQuantity, string lineNo) : this() {
      this.ExtSkuCode = extSkuCode;
      this.ExtQuantity = extQuantity;
      this.Price = price;
      this.GetInvType = getInvType;
      this.BusiMemo = busiMemo;
      this.AuditMemo = auditMemo;
      this.FeedbackMemo = feedbackMemo;
      this.DiscountAmount = discountAmount;
      this.SkuStatus = skuStatus;
      this.OutGoodsCode = outGoodsCode;
      this.OutQuantity = outQuantity;
      this.LineNo = lineNo;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_extSkuCode = false;
        bool isset_extQuantity = false;
        bool isset_price = false;
        bool isset_getInvType = false;
        bool isset_busiMemo = false;
        bool isset_auditMemo = false;
        bool isset_feedbackMemo = false;
        bool isset_discountAmount = false;
        bool isset_skuStatus = false;
        bool isset_outGoodsCode = false;
        bool isset_outQuantity = false;
        bool isset_lineNo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ExtSkuCode = iprot.ReadString();
                isset_extSkuCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExtQuantity = iprot.ReadString();
                isset_extQuantity = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Price = iprot.ReadString();
                isset_price = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GetInvType = iprot.ReadString();
                isset_getInvType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                BusiMemo = iprot.ReadString();
                isset_busiMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                AuditMemo = iprot.ReadString();
                isset_auditMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                FeedbackMemo = iprot.ReadString();
                isset_feedbackMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                DiscountAmount = iprot.ReadString();
                isset_discountAmount = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                ExtSkuName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                SkuStatus = iprot.ReadString();
                isset_skuStatus = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                CustomerCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                CmsSkuID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                CmsSkuCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                CmsSkuName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                CmsSkuSpec = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                CmsSkuFactory = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.String) {
                CmsABCType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.String) {
                DrugCertificate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                SpecialFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.String) {
                SelectedFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.String) {
                GetInvTypeID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.String) {
                CmsQuantity = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.String) {
                Amount = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.String) {
                Credit = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.String) {
                TransMode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 27:
              if (field.Type == TType.String) {
                TransName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.String) {
                PayType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.String) {
                PayName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                SpeID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 31:
              if (field.Type == TType.String) {
                PriceType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 32:
              if (field.Type == TType.String) {
                PriceID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 33:
              if (field.Type == TType.String) {
                FlootPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 34:
              if (field.Type == TType.String) {
                OffPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 35:
              if (field.Type == TType.String) {
                KpiPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 36:
              if (field.Type == TType.String) {
                OriginalPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 37:
              if (field.Type == TType.String) {
                DiscountFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 38:
              if (field.Type == TType.String) {
                DiscountPrice = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 39:
              if (field.Type == TType.String) {
                BargainType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.String) {
                OUTRATE = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 41:
              if (field.Type == TType.String) {
                Doublebillqty = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 42:
              if (field.Type == TType.String) {
                Unexebillqty = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 43:
              if (field.Type == TType.String) {
                LastPriceDate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 44:
              if (field.Type == TType.String) {
                InvoiceTypeID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 45:
              if (field.Type == TType.String) {
                InvoiceType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 46:
              if (field.Type == TType.String) {
                InvTitleFlagID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 47:
              if (field.Type == TType.String) {
                InvTitleFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 48:
              if (field.Type == TType.String) {
                BargainTypeName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 49:
              if (field.Type == TType.String) {
                OutGoodsCode = iprot.ReadString();
                isset_outGoodsCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 50:
              if (field.Type == TType.String) {
                OutQuantity = iprot.ReadString();
                isset_outQuantity = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 51:
              if (field.Type == TType.String) {
                IsMutiSku = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 52:
              if (field.Type == TType.String) {
                LineNo = iprot.ReadString();
                isset_lineNo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 53:
              if (field.Type == TType.String) {
                CmsSkuCategory = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_extSkuCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_extQuantity)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_price)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_getInvType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_busiMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_auditMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_feedbackMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_discountAmount)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_skuStatus)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_outGoodsCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_outQuantity)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_lineNo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PreparedOrder");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "extSkuCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtSkuCode);
        oprot.WriteFieldEnd();
        field.Name = "extQuantity";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtQuantity);
        oprot.WriteFieldEnd();
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Price);
        oprot.WriteFieldEnd();
        field.Name = "getInvType";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GetInvType);
        oprot.WriteFieldEnd();
        field.Name = "busiMemo";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BusiMemo);
        oprot.WriteFieldEnd();
        field.Name = "auditMemo";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuditMemo);
        oprot.WriteFieldEnd();
        field.Name = "feedbackMemo";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FeedbackMemo);
        oprot.WriteFieldEnd();
        field.Name = "discountAmount";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DiscountAmount);
        oprot.WriteFieldEnd();
        if (ExtSkuName != null && __isset.extSkuName) {
          field.Name = "extSkuName";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExtSkuName);
          oprot.WriteFieldEnd();
        }
        field.Name = "skuStatus";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SkuStatus);
        oprot.WriteFieldEnd();
        if (CustomerCode != null && __isset.customerCode) {
          field.Name = "customerCode";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CustomerCode);
          oprot.WriteFieldEnd();
        }
        if (CmsSkuID != null && __isset.cmsSkuID) {
          field.Name = "cmsSkuID";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSkuID);
          oprot.WriteFieldEnd();
        }
        if (CmsSkuCode != null && __isset.cmsSkuCode) {
          field.Name = "cmsSkuCode";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSkuCode);
          oprot.WriteFieldEnd();
        }
        if (CmsSkuName != null && __isset.cmsSkuName) {
          field.Name = "cmsSkuName";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSkuName);
          oprot.WriteFieldEnd();
        }
        if (CmsSkuSpec != null && __isset.cmsSkuSpec) {
          field.Name = "cmsSkuSpec";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSkuSpec);
          oprot.WriteFieldEnd();
        }
        if (CmsSkuFactory != null && __isset.cmsSkuFactory) {
          field.Name = "cmsSkuFactory";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSkuFactory);
          oprot.WriteFieldEnd();
        }
        if (CmsABCType != null && __isset.cmsABCType) {
          field.Name = "cmsABCType";
          field.Type = TType.String;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsABCType);
          oprot.WriteFieldEnd();
        }
        if (DrugCertificate != null && __isset.drugCertificate) {
          field.Name = "drugCertificate";
          field.Type = TType.String;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DrugCertificate);
          oprot.WriteFieldEnd();
        }
        if (SpecialFlag != null && __isset.specialFlag) {
          field.Name = "specialFlag";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SpecialFlag);
          oprot.WriteFieldEnd();
        }
        if (SelectedFlag != null && __isset.selectedFlag) {
          field.Name = "selectedFlag";
          field.Type = TType.String;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SelectedFlag);
          oprot.WriteFieldEnd();
        }
        if (GetInvTypeID != null && __isset.getInvTypeID) {
          field.Name = "getInvTypeID";
          field.Type = TType.String;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GetInvTypeID);
          oprot.WriteFieldEnd();
        }
        if (CmsQuantity != null && __isset.cmsQuantity) {
          field.Name = "cmsQuantity";
          field.Type = TType.String;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsQuantity);
          oprot.WriteFieldEnd();
        }
        if (Amount != null && __isset.amount) {
          field.Name = "amount";
          field.Type = TType.String;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Amount);
          oprot.WriteFieldEnd();
        }
        if (Credit != null && __isset.credit) {
          field.Name = "credit";
          field.Type = TType.String;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Credit);
          oprot.WriteFieldEnd();
        }
        if (TransMode != null && __isset.transMode) {
          field.Name = "transMode";
          field.Type = TType.String;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransMode);
          oprot.WriteFieldEnd();
        }
        if (TransName != null && __isset.transName) {
          field.Name = "transName";
          field.Type = TType.String;
          field.ID = 27;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransName);
          oprot.WriteFieldEnd();
        }
        if (PayType != null && __isset.payType) {
          field.Name = "payType";
          field.Type = TType.String;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PayType);
          oprot.WriteFieldEnd();
        }
        if (PayName != null && __isset.payName) {
          field.Name = "payName";
          field.Type = TType.String;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PayName);
          oprot.WriteFieldEnd();
        }
        if (SpeID != null && __isset.speID) {
          field.Name = "speID";
          field.Type = TType.String;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SpeID);
          oprot.WriteFieldEnd();
        }
        if (PriceType != null && __isset.priceType) {
          field.Name = "priceType";
          field.Type = TType.String;
          field.ID = 31;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PriceType);
          oprot.WriteFieldEnd();
        }
        if (PriceID != null && __isset.priceID) {
          field.Name = "priceID";
          field.Type = TType.String;
          field.ID = 32;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PriceID);
          oprot.WriteFieldEnd();
        }
        if (FlootPrice != null && __isset.flootPrice) {
          field.Name = "flootPrice";
          field.Type = TType.String;
          field.ID = 33;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FlootPrice);
          oprot.WriteFieldEnd();
        }
        if (OffPrice != null && __isset.offPrice) {
          field.Name = "offPrice";
          field.Type = TType.String;
          field.ID = 34;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OffPrice);
          oprot.WriteFieldEnd();
        }
        if (KpiPrice != null && __isset.kpiPrice) {
          field.Name = "kpiPrice";
          field.Type = TType.String;
          field.ID = 35;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(KpiPrice);
          oprot.WriteFieldEnd();
        }
        if (OriginalPrice != null && __isset.originalPrice) {
          field.Name = "originalPrice";
          field.Type = TType.String;
          field.ID = 36;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OriginalPrice);
          oprot.WriteFieldEnd();
        }
        if (DiscountFlag != null && __isset.discountFlag) {
          field.Name = "discountFlag";
          field.Type = TType.String;
          field.ID = 37;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DiscountFlag);
          oprot.WriteFieldEnd();
        }
        if (DiscountPrice != null && __isset.discountPrice) {
          field.Name = "discountPrice";
          field.Type = TType.String;
          field.ID = 38;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DiscountPrice);
          oprot.WriteFieldEnd();
        }
        if (BargainType != null && __isset.bargainType) {
          field.Name = "bargainType";
          field.Type = TType.String;
          field.ID = 39;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BargainType);
          oprot.WriteFieldEnd();
        }
        if (OUTRATE != null && __isset.OUTRATE) {
          field.Name = "OUTRATE";
          field.Type = TType.String;
          field.ID = 40;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OUTRATE);
          oprot.WriteFieldEnd();
        }
        if (Doublebillqty != null && __isset.doublebillqty) {
          field.Name = "doublebillqty";
          field.Type = TType.String;
          field.ID = 41;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Doublebillqty);
          oprot.WriteFieldEnd();
        }
        if (Unexebillqty != null && __isset.unexebillqty) {
          field.Name = "unexebillqty";
          field.Type = TType.String;
          field.ID = 42;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Unexebillqty);
          oprot.WriteFieldEnd();
        }
        if (LastPriceDate != null && __isset.lastPriceDate) {
          field.Name = "lastPriceDate";
          field.Type = TType.String;
          field.ID = 43;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastPriceDate);
          oprot.WriteFieldEnd();
        }
        if (InvoiceTypeID != null && __isset.invoiceTypeID) {
          field.Name = "invoiceTypeID";
          field.Type = TType.String;
          field.ID = 44;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvoiceTypeID);
          oprot.WriteFieldEnd();
        }
        if (InvoiceType != null && __isset.invoiceType) {
          field.Name = "invoiceType";
          field.Type = TType.String;
          field.ID = 45;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvoiceType);
          oprot.WriteFieldEnd();
        }
        if (InvTitleFlagID != null && __isset.invTitleFlagID) {
          field.Name = "invTitleFlagID";
          field.Type = TType.String;
          field.ID = 46;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvTitleFlagID);
          oprot.WriteFieldEnd();
        }
        if (InvTitleFlag != null && __isset.invTitleFlag) {
          field.Name = "invTitleFlag";
          field.Type = TType.String;
          field.ID = 47;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvTitleFlag);
          oprot.WriteFieldEnd();
        }
        if (BargainTypeName != null && __isset.bargainTypeName) {
          field.Name = "bargainTypeName";
          field.Type = TType.String;
          field.ID = 48;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BargainTypeName);
          oprot.WriteFieldEnd();
        }
        field.Name = "outGoodsCode";
        field.Type = TType.String;
        field.ID = 49;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OutGoodsCode);
        oprot.WriteFieldEnd();
        field.Name = "outQuantity";
        field.Type = TType.String;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OutQuantity);
        oprot.WriteFieldEnd();
        if (IsMutiSku != null && __isset.isMutiSku) {
          field.Name = "isMutiSku";
          field.Type = TType.String;
          field.ID = 51;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IsMutiSku);
          oprot.WriteFieldEnd();
        }
        field.Name = "lineNo";
        field.Type = TType.String;
        field.ID = 52;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LineNo);
        oprot.WriteFieldEnd();
        if (CmsSkuCategory != null && __isset.cmsSkuCategory) {
          field.Name = "cmsSkuCategory";
          field.Type = TType.String;
          field.ID = 53;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsSkuCategory);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PreparedOrder(");
      __sb.Append(", ExtSkuCode: ");
      __sb.Append(ExtSkuCode);
      __sb.Append(", ExtQuantity: ");
      __sb.Append(ExtQuantity);
      __sb.Append(", Price: ");
      __sb.Append(Price);
      __sb.Append(", GetInvType: ");
      __sb.Append(GetInvType);
      __sb.Append(", BusiMemo: ");
      __sb.Append(BusiMemo);
      __sb.Append(", AuditMemo: ");
      __sb.Append(AuditMemo);
      __sb.Append(", FeedbackMemo: ");
      __sb.Append(FeedbackMemo);
      __sb.Append(", DiscountAmount: ");
      __sb.Append(DiscountAmount);
      if (ExtSkuName != null && __isset.extSkuName) {
        __sb.Append(", ExtSkuName: ");
        __sb.Append(ExtSkuName);
      }
      __sb.Append(", SkuStatus: ");
      __sb.Append(SkuStatus);
      if (CustomerCode != null && __isset.customerCode) {
        __sb.Append(", CustomerCode: ");
        __sb.Append(CustomerCode);
      }
      if (CmsSkuID != null && __isset.cmsSkuID) {
        __sb.Append(", CmsSkuID: ");
        __sb.Append(CmsSkuID);
      }
      if (CmsSkuCode != null && __isset.cmsSkuCode) {
        __sb.Append(", CmsSkuCode: ");
        __sb.Append(CmsSkuCode);
      }
      if (CmsSkuName != null && __isset.cmsSkuName) {
        __sb.Append(", CmsSkuName: ");
        __sb.Append(CmsSkuName);
      }
      if (CmsSkuSpec != null && __isset.cmsSkuSpec) {
        __sb.Append(", CmsSkuSpec: ");
        __sb.Append(CmsSkuSpec);
      }
      if (CmsSkuFactory != null && __isset.cmsSkuFactory) {
        __sb.Append(", CmsSkuFactory: ");
        __sb.Append(CmsSkuFactory);
      }
      if (CmsABCType != null && __isset.cmsABCType) {
        __sb.Append(", CmsABCType: ");
        __sb.Append(CmsABCType);
      }
      if (DrugCertificate != null && __isset.drugCertificate) {
        __sb.Append(", DrugCertificate: ");
        __sb.Append(DrugCertificate);
      }
      if (SpecialFlag != null && __isset.specialFlag) {
        __sb.Append(", SpecialFlag: ");
        __sb.Append(SpecialFlag);
      }
      if (SelectedFlag != null && __isset.selectedFlag) {
        __sb.Append(", SelectedFlag: ");
        __sb.Append(SelectedFlag);
      }
      if (GetInvTypeID != null && __isset.getInvTypeID) {
        __sb.Append(", GetInvTypeID: ");
        __sb.Append(GetInvTypeID);
      }
      if (CmsQuantity != null && __isset.cmsQuantity) {
        __sb.Append(", CmsQuantity: ");
        __sb.Append(CmsQuantity);
      }
      if (Amount != null && __isset.amount) {
        __sb.Append(", Amount: ");
        __sb.Append(Amount);
      }
      if (Credit != null && __isset.credit) {
        __sb.Append(", Credit: ");
        __sb.Append(Credit);
      }
      if (TransMode != null && __isset.transMode) {
        __sb.Append(", TransMode: ");
        __sb.Append(TransMode);
      }
      if (TransName != null && __isset.transName) {
        __sb.Append(", TransName: ");
        __sb.Append(TransName);
      }
      if (PayType != null && __isset.payType) {
        __sb.Append(", PayType: ");
        __sb.Append(PayType);
      }
      if (PayName != null && __isset.payName) {
        __sb.Append(", PayName: ");
        __sb.Append(PayName);
      }
      if (SpeID != null && __isset.speID) {
        __sb.Append(", SpeID: ");
        __sb.Append(SpeID);
      }
      if (PriceType != null && __isset.priceType) {
        __sb.Append(", PriceType: ");
        __sb.Append(PriceType);
      }
      if (PriceID != null && __isset.priceID) {
        __sb.Append(", PriceID: ");
        __sb.Append(PriceID);
      }
      if (FlootPrice != null && __isset.flootPrice) {
        __sb.Append(", FlootPrice: ");
        __sb.Append(FlootPrice);
      }
      if (OffPrice != null && __isset.offPrice) {
        __sb.Append(", OffPrice: ");
        __sb.Append(OffPrice);
      }
      if (KpiPrice != null && __isset.kpiPrice) {
        __sb.Append(", KpiPrice: ");
        __sb.Append(KpiPrice);
      }
      if (OriginalPrice != null && __isset.originalPrice) {
        __sb.Append(", OriginalPrice: ");
        __sb.Append(OriginalPrice);
      }
      if (DiscountFlag != null && __isset.discountFlag) {
        __sb.Append(", DiscountFlag: ");
        __sb.Append(DiscountFlag);
      }
      if (DiscountPrice != null && __isset.discountPrice) {
        __sb.Append(", DiscountPrice: ");
        __sb.Append(DiscountPrice);
      }
      if (BargainType != null && __isset.bargainType) {
        __sb.Append(", BargainType: ");
        __sb.Append(BargainType);
      }
      if (OUTRATE != null && __isset.OUTRATE) {
        __sb.Append(", OUTRATE: ");
        __sb.Append(OUTRATE);
      }
      if (Doublebillqty != null && __isset.doublebillqty) {
        __sb.Append(", Doublebillqty: ");
        __sb.Append(Doublebillqty);
      }
      if (Unexebillqty != null && __isset.unexebillqty) {
        __sb.Append(", Unexebillqty: ");
        __sb.Append(Unexebillqty);
      }
      if (LastPriceDate != null && __isset.lastPriceDate) {
        __sb.Append(", LastPriceDate: ");
        __sb.Append(LastPriceDate);
      }
      if (InvoiceTypeID != null && __isset.invoiceTypeID) {
        __sb.Append(", InvoiceTypeID: ");
        __sb.Append(InvoiceTypeID);
      }
      if (InvoiceType != null && __isset.invoiceType) {
        __sb.Append(", InvoiceType: ");
        __sb.Append(InvoiceType);
      }
      if (InvTitleFlagID != null && __isset.invTitleFlagID) {
        __sb.Append(", InvTitleFlagID: ");
        __sb.Append(InvTitleFlagID);
      }
      if (InvTitleFlag != null && __isset.invTitleFlag) {
        __sb.Append(", InvTitleFlag: ");
        __sb.Append(InvTitleFlag);
      }
      if (BargainTypeName != null && __isset.bargainTypeName) {
        __sb.Append(", BargainTypeName: ");
        __sb.Append(BargainTypeName);
      }
      __sb.Append(", OutGoodsCode: ");
      __sb.Append(OutGoodsCode);
      __sb.Append(", OutQuantity: ");
      __sb.Append(OutQuantity);
      if (IsMutiSku != null && __isset.isMutiSku) {
        __sb.Append(", IsMutiSku: ");
        __sb.Append(IsMutiSku);
      }
      __sb.Append(", LineNo: ");
      __sb.Append(LineNo);
      if (CmsSkuCategory != null && __isset.cmsSkuCategory) {
        __sb.Append(", CmsSkuCategory: ");
        __sb.Append(CmsSkuCategory);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
