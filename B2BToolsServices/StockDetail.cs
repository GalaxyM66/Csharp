/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StockDetail : TBase
  {

    public string OWNERNAME { get; set; }

    public string LOTNO { get; set; }

    public string BATCHNO { get; set; }

    public string EMPNAME { get; set; }

    public string PRDDATE { get; set; }

    public string ENDDATE { get; set; }

    public string ALLOQTY { get; set; }

    public string UNALLOQTY { get; set; }

    public string DESCRIPTION { get; set; }

    public string SALBILLTYPE { get; set; }

    public string DEPTNAME { get; set; }

    public StockDetail() {
    }

    public StockDetail(string OWNERNAME, string LOTNO, string BATCHNO, string EMPNAME, string PRDDATE, string ENDDATE, string ALLOQTY, string UNALLOQTY, string DESCRIPTION, string SALBILLTYPE, string DEPTNAME) : this() {
      this.OWNERNAME = OWNERNAME;
      this.LOTNO = LOTNO;
      this.BATCHNO = BATCHNO;
      this.EMPNAME = EMPNAME;
      this.PRDDATE = PRDDATE;
      this.ENDDATE = ENDDATE;
      this.ALLOQTY = ALLOQTY;
      this.UNALLOQTY = UNALLOQTY;
      this.DESCRIPTION = DESCRIPTION;
      this.SALBILLTYPE = SALBILLTYPE;
      this.DEPTNAME = DEPTNAME;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_OWNERNAME = false;
        bool isset_LOTNO = false;
        bool isset_BATCHNO = false;
        bool isset_EMPNAME = false;
        bool isset_PRDDATE = false;
        bool isset_ENDDATE = false;
        bool isset_ALLOQTY = false;
        bool isset_UNALLOQTY = false;
        bool isset_DESCRIPTION = false;
        bool isset_SALBILLTYPE = false;
        bool isset_DEPTNAME = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OWNERNAME = iprot.ReadString();
                isset_OWNERNAME = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                LOTNO = iprot.ReadString();
                isset_LOTNO = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                BATCHNO = iprot.ReadString();
                isset_BATCHNO = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                EMPNAME = iprot.ReadString();
                isset_EMPNAME = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                PRDDATE = iprot.ReadString();
                isset_PRDDATE = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                ENDDATE = iprot.ReadString();
                isset_ENDDATE = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                ALLOQTY = iprot.ReadString();
                isset_ALLOQTY = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                UNALLOQTY = iprot.ReadString();
                isset_UNALLOQTY = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                DESCRIPTION = iprot.ReadString();
                isset_DESCRIPTION = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                SALBILLTYPE = iprot.ReadString();
                isset_SALBILLTYPE = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                DEPTNAME = iprot.ReadString();
                isset_DEPTNAME = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_OWNERNAME)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_LOTNO)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_BATCHNO)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_EMPNAME)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_PRDDATE)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ENDDATE)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ALLOQTY)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_UNALLOQTY)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_DESCRIPTION)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SALBILLTYPE)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_DEPTNAME)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("StockDetail");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "OWNERNAME";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OWNERNAME);
        oprot.WriteFieldEnd();
        field.Name = "LOTNO";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LOTNO);
        oprot.WriteFieldEnd();
        field.Name = "BATCHNO";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BATCHNO);
        oprot.WriteFieldEnd();
        field.Name = "EMPNAME";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EMPNAME);
        oprot.WriteFieldEnd();
        field.Name = "PRDDATE";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PRDDATE);
        oprot.WriteFieldEnd();
        field.Name = "ENDDATE";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ENDDATE);
        oprot.WriteFieldEnd();
        field.Name = "ALLOQTY";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ALLOQTY);
        oprot.WriteFieldEnd();
        field.Name = "UNALLOQTY";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UNALLOQTY);
        oprot.WriteFieldEnd();
        field.Name = "DESCRIPTION";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DESCRIPTION);
        oprot.WriteFieldEnd();
        field.Name = "SALBILLTYPE";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SALBILLTYPE);
        oprot.WriteFieldEnd();
        field.Name = "DEPTNAME";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DEPTNAME);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("StockDetail(");
      __sb.Append(", OWNERNAME: ");
      __sb.Append(OWNERNAME);
      __sb.Append(", LOTNO: ");
      __sb.Append(LOTNO);
      __sb.Append(", BATCHNO: ");
      __sb.Append(BATCHNO);
      __sb.Append(", EMPNAME: ");
      __sb.Append(EMPNAME);
      __sb.Append(", PRDDATE: ");
      __sb.Append(PRDDATE);
      __sb.Append(", ENDDATE: ");
      __sb.Append(ENDDATE);
      __sb.Append(", ALLOQTY: ");
      __sb.Append(ALLOQTY);
      __sb.Append(", UNALLOQTY: ");
      __sb.Append(UNALLOQTY);
      __sb.Append(", DESCRIPTION: ");
      __sb.Append(DESCRIPTION);
      __sb.Append(", SALBILLTYPE: ");
      __sb.Append(SALBILLTYPE);
      __sb.Append(", DEPTNAME: ");
      __sb.Append(DEPTNAME);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
