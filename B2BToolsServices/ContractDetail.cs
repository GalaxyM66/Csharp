/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ContractDetail : TBase
  {

    public string HeaderID { get; set; }

    public string DetailID { get; set; }

    public string GoodID { get; set; }

    public string GoodName { get; set; }

    public string Quantity { get; set; }

    public string BusiMemo { get; set; }

    public string AuditMemo { get; set; }

    public string FeedbackMemo { get; set; }

    public string ATTCHINV { get; set; }

    public string DiscountAmount { get; set; }

    public string Price { get; set; }

    public string PriceType { get; set; }

    public string PriceID { get; set; }

    public string FlootPrice { get; set; }

    public string OffPrice { get; set; }

    public string KpiPrice { get; set; }

    public string OriginalPrice { get; set; }

    public string DiscountFlag { get; set; }

    public string DiscountPrice { get; set; }

    public string BargainType { get; set; }

    public string BargainTypeName { get; set; }

    public string OUTRATE { get; set; }

    public string InvoiceTypeID { get; set; }

    public string InvoiceType { get; set; }

    public string InvTitleFlagID { get; set; }

    public string InvTitleFlag { get; set; }

    public ContractDetail() {
    }

    public ContractDetail(string headerID, string detailID, string goodID, string goodName, string quantity, string busiMemo, string auditMemo, string feedbackMemo, string ATTCHINV, string discountAmount, string price, string priceType, string priceID, string flootPrice, string offPrice, string kpiPrice, string originalPrice, string discountFlag, string discountPrice, string bargainType, string bargainTypeName, string OUTRATE, string invoiceTypeID, string invoiceType, string invTitleFlagID, string invTitleFlag) : this() {
      this.HeaderID = headerID;
      this.DetailID = detailID;
      this.GoodID = goodID;
      this.GoodName = goodName;
      this.Quantity = quantity;
      this.BusiMemo = busiMemo;
      this.AuditMemo = auditMemo;
      this.FeedbackMemo = feedbackMemo;
      this.ATTCHINV = ATTCHINV;
      this.DiscountAmount = discountAmount;
      this.Price = price;
      this.PriceType = priceType;
      this.PriceID = priceID;
      this.FlootPrice = flootPrice;
      this.OffPrice = offPrice;
      this.KpiPrice = kpiPrice;
      this.OriginalPrice = originalPrice;
      this.DiscountFlag = discountFlag;
      this.DiscountPrice = discountPrice;
      this.BargainType = bargainType;
      this.BargainTypeName = bargainTypeName;
      this.OUTRATE = OUTRATE;
      this.InvoiceTypeID = invoiceTypeID;
      this.InvoiceType = invoiceType;
      this.InvTitleFlagID = invTitleFlagID;
      this.InvTitleFlag = invTitleFlag;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_headerID = false;
        bool isset_detailID = false;
        bool isset_goodID = false;
        bool isset_goodName = false;
        bool isset_quantity = false;
        bool isset_busiMemo = false;
        bool isset_auditMemo = false;
        bool isset_feedbackMemo = false;
        bool isset_ATTCHINV = false;
        bool isset_discountAmount = false;
        bool isset_price = false;
        bool isset_priceType = false;
        bool isset_priceID = false;
        bool isset_flootPrice = false;
        bool isset_offPrice = false;
        bool isset_kpiPrice = false;
        bool isset_originalPrice = false;
        bool isset_discountFlag = false;
        bool isset_discountPrice = false;
        bool isset_bargainType = false;
        bool isset_bargainTypeName = false;
        bool isset_OUTRATE = false;
        bool isset_invoiceTypeID = false;
        bool isset_invoiceType = false;
        bool isset_invTitleFlagID = false;
        bool isset_invTitleFlag = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                HeaderID = iprot.ReadString();
                isset_headerID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DetailID = iprot.ReadString();
                isset_detailID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GoodID = iprot.ReadString();
                isset_goodID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                GoodName = iprot.ReadString();
                isset_goodName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Quantity = iprot.ReadString();
                isset_quantity = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                BusiMemo = iprot.ReadString();
                isset_busiMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                AuditMemo = iprot.ReadString();
                isset_auditMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                FeedbackMemo = iprot.ReadString();
                isset_feedbackMemo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                ATTCHINV = iprot.ReadString();
                isset_ATTCHINV = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                DiscountAmount = iprot.ReadString();
                isset_discountAmount = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.String) {
                Price = iprot.ReadString();
                isset_price = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 31:
              if (field.Type == TType.String) {
                PriceType = iprot.ReadString();
                isset_priceType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 32:
              if (field.Type == TType.String) {
                PriceID = iprot.ReadString();
                isset_priceID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 33:
              if (field.Type == TType.String) {
                FlootPrice = iprot.ReadString();
                isset_flootPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 34:
              if (field.Type == TType.String) {
                OffPrice = iprot.ReadString();
                isset_offPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 35:
              if (field.Type == TType.String) {
                KpiPrice = iprot.ReadString();
                isset_kpiPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 36:
              if (field.Type == TType.String) {
                OriginalPrice = iprot.ReadString();
                isset_originalPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 37:
              if (field.Type == TType.String) {
                DiscountFlag = iprot.ReadString();
                isset_discountFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 38:
              if (field.Type == TType.String) {
                DiscountPrice = iprot.ReadString();
                isset_discountPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 39:
              if (field.Type == TType.String) {
                BargainType = iprot.ReadString();
                isset_bargainType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 40:
              if (field.Type == TType.String) {
                BargainTypeName = iprot.ReadString();
                isset_bargainTypeName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 41:
              if (field.Type == TType.String) {
                OUTRATE = iprot.ReadString();
                isset_OUTRATE = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 42:
              if (field.Type == TType.String) {
                InvoiceTypeID = iprot.ReadString();
                isset_invoiceTypeID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 43:
              if (field.Type == TType.String) {
                InvoiceType = iprot.ReadString();
                isset_invoiceType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 44:
              if (field.Type == TType.String) {
                InvTitleFlagID = iprot.ReadString();
                isset_invTitleFlagID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 45:
              if (field.Type == TType.String) {
                InvTitleFlag = iprot.ReadString();
                isset_invTitleFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_headerID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_detailID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_goodID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_goodName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_quantity)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_busiMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_auditMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_feedbackMemo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ATTCHINV)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_discountAmount)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_price)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_priceType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_priceID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_flootPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_offPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_kpiPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_originalPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_discountFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_discountPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_bargainType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_bargainTypeName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_OUTRATE)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_invoiceTypeID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_invoiceType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_invTitleFlagID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_invTitleFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ContractDetail");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "headerID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HeaderID);
        oprot.WriteFieldEnd();
        field.Name = "detailID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DetailID);
        oprot.WriteFieldEnd();
        field.Name = "goodID";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GoodID);
        oprot.WriteFieldEnd();
        field.Name = "goodName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GoodName);
        oprot.WriteFieldEnd();
        field.Name = "quantity";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Quantity);
        oprot.WriteFieldEnd();
        field.Name = "busiMemo";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BusiMemo);
        oprot.WriteFieldEnd();
        field.Name = "auditMemo";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuditMemo);
        oprot.WriteFieldEnd();
        field.Name = "feedbackMemo";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FeedbackMemo);
        oprot.WriteFieldEnd();
        field.Name = "ATTCHINV";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ATTCHINV);
        oprot.WriteFieldEnd();
        field.Name = "discountAmount";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DiscountAmount);
        oprot.WriteFieldEnd();
        field.Name = "price";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Price);
        oprot.WriteFieldEnd();
        field.Name = "priceType";
        field.Type = TType.String;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PriceType);
        oprot.WriteFieldEnd();
        field.Name = "priceID";
        field.Type = TType.String;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PriceID);
        oprot.WriteFieldEnd();
        field.Name = "flootPrice";
        field.Type = TType.String;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FlootPrice);
        oprot.WriteFieldEnd();
        field.Name = "offPrice";
        field.Type = TType.String;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OffPrice);
        oprot.WriteFieldEnd();
        field.Name = "kpiPrice";
        field.Type = TType.String;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(KpiPrice);
        oprot.WriteFieldEnd();
        field.Name = "originalPrice";
        field.Type = TType.String;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OriginalPrice);
        oprot.WriteFieldEnd();
        field.Name = "discountFlag";
        field.Type = TType.String;
        field.ID = 37;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DiscountFlag);
        oprot.WriteFieldEnd();
        field.Name = "discountPrice";
        field.Type = TType.String;
        field.ID = 38;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DiscountPrice);
        oprot.WriteFieldEnd();
        field.Name = "bargainType";
        field.Type = TType.String;
        field.ID = 39;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BargainType);
        oprot.WriteFieldEnd();
        field.Name = "bargainTypeName";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BargainTypeName);
        oprot.WriteFieldEnd();
        field.Name = "OUTRATE";
        field.Type = TType.String;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OUTRATE);
        oprot.WriteFieldEnd();
        field.Name = "invoiceTypeID";
        field.Type = TType.String;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InvoiceTypeID);
        oprot.WriteFieldEnd();
        field.Name = "invoiceType";
        field.Type = TType.String;
        field.ID = 43;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InvoiceType);
        oprot.WriteFieldEnd();
        field.Name = "invTitleFlagID";
        field.Type = TType.String;
        field.ID = 44;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InvTitleFlagID);
        oprot.WriteFieldEnd();
        field.Name = "invTitleFlag";
        field.Type = TType.String;
        field.ID = 45;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InvTitleFlag);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ContractDetail(");
      __sb.Append(", HeaderID: ");
      __sb.Append(HeaderID);
      __sb.Append(", DetailID: ");
      __sb.Append(DetailID);
      __sb.Append(", GoodID: ");
      __sb.Append(GoodID);
      __sb.Append(", GoodName: ");
      __sb.Append(GoodName);
      __sb.Append(", Quantity: ");
      __sb.Append(Quantity);
      __sb.Append(", BusiMemo: ");
      __sb.Append(BusiMemo);
      __sb.Append(", AuditMemo: ");
      __sb.Append(AuditMemo);
      __sb.Append(", FeedbackMemo: ");
      __sb.Append(FeedbackMemo);
      __sb.Append(", ATTCHINV: ");
      __sb.Append(ATTCHINV);
      __sb.Append(", DiscountAmount: ");
      __sb.Append(DiscountAmount);
      __sb.Append(", Price: ");
      __sb.Append(Price);
      __sb.Append(", PriceType: ");
      __sb.Append(PriceType);
      __sb.Append(", PriceID: ");
      __sb.Append(PriceID);
      __sb.Append(", FlootPrice: ");
      __sb.Append(FlootPrice);
      __sb.Append(", OffPrice: ");
      __sb.Append(OffPrice);
      __sb.Append(", KpiPrice: ");
      __sb.Append(KpiPrice);
      __sb.Append(", OriginalPrice: ");
      __sb.Append(OriginalPrice);
      __sb.Append(", DiscountFlag: ");
      __sb.Append(DiscountFlag);
      __sb.Append(", DiscountPrice: ");
      __sb.Append(DiscountPrice);
      __sb.Append(", BargainType: ");
      __sb.Append(BargainType);
      __sb.Append(", BargainTypeName: ");
      __sb.Append(BargainTypeName);
      __sb.Append(", OUTRATE: ");
      __sb.Append(OUTRATE);
      __sb.Append(", InvoiceTypeID: ");
      __sb.Append(InvoiceTypeID);
      __sb.Append(", InvoiceType: ");
      __sb.Append(InvoiceType);
      __sb.Append(", InvTitleFlagID: ");
      __sb.Append(InvTitleFlagID);
      __sb.Append(", InvTitleFlag: ");
      __sb.Append(InvTitleFlag);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
