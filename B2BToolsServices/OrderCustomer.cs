/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OrderCustomer : TBase
  {
    private string _speID;
    private string _CRDDAYS;
    private string _transMode;
    private string _transName;
    private string _payMode;
    private string _payName;
    private string _extMark;
    private string _costID;
    private string _invTitleFlagID;
    private string _invTitleFlag;

    public string CustomerCode { get; set; }

    public string CustomerID { get; set; }

    public string CustomerName { get; set; }

    public string OwnerID { get; set; }

    public string DeptID { get; set; }

    public string Status { get; set; }

    public string SpeID
    {
      get
      {
        return _speID;
      }
      set
      {
        __isset.speID = true;
        this._speID = value;
      }
    }

    public string CRDDAYS
    {
      get
      {
        return _CRDDAYS;
      }
      set
      {
        __isset.CRDDAYS = true;
        this._CRDDAYS = value;
      }
    }

    public string TransMode
    {
      get
      {
        return _transMode;
      }
      set
      {
        __isset.transMode = true;
        this._transMode = value;
      }
    }

    public string TransName
    {
      get
      {
        return _transName;
      }
      set
      {
        __isset.transName = true;
        this._transName = value;
      }
    }

    public string PayMode
    {
      get
      {
        return _payMode;
      }
      set
      {
        __isset.payMode = true;
        this._payMode = value;
      }
    }

    public string PayName
    {
      get
      {
        return _payName;
      }
      set
      {
        __isset.payName = true;
        this._payName = value;
      }
    }

    public string ExtMark
    {
      get
      {
        return _extMark;
      }
      set
      {
        __isset.extMark = true;
        this._extMark = value;
      }
    }

    public string CostID
    {
      get
      {
        return _costID;
      }
      set
      {
        __isset.costID = true;
        this._costID = value;
      }
    }

    public string InvTitleFlagID
    {
      get
      {
        return _invTitleFlagID;
      }
      set
      {
        __isset.invTitleFlagID = true;
        this._invTitleFlagID = value;
      }
    }

    public string InvTitleFlag
    {
      get
      {
        return _invTitleFlag;
      }
      set
      {
        __isset.invTitleFlag = true;
        this._invTitleFlag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool speID;
      public bool CRDDAYS;
      public bool transMode;
      public bool transName;
      public bool payMode;
      public bool payName;
      public bool extMark;
      public bool costID;
      public bool invTitleFlagID;
      public bool invTitleFlag;
    }

    public OrderCustomer() {
    }

    public OrderCustomer(string customerCode, string customerID, string customerName, string ownerID, string deptID, string status) : this() {
      this.CustomerCode = customerCode;
      this.CustomerID = customerID;
      this.CustomerName = customerName;
      this.OwnerID = ownerID;
      this.DeptID = deptID;
      this.Status = status;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_customerCode = false;
        bool isset_customerID = false;
        bool isset_customerName = false;
        bool isset_ownerID = false;
        bool isset_deptID = false;
        bool isset_status = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CustomerCode = iprot.ReadString();
                isset_customerCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CustomerID = iprot.ReadString();
                isset_customerID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CustomerName = iprot.ReadString();
                isset_customerName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                OwnerID = iprot.ReadString();
                isset_ownerID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                DeptID = iprot.ReadString();
                isset_deptID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Status = iprot.ReadString();
                isset_status = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                SpeID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                CRDDAYS = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                TransMode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                TransName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                PayMode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                PayName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                ExtMark = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                CostID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                InvTitleFlagID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                InvTitleFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_customerCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_customerName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ownerID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_deptID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_status)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OrderCustomer");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "customerCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerCode);
        oprot.WriteFieldEnd();
        field.Name = "customerID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerID);
        oprot.WriteFieldEnd();
        field.Name = "customerName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CustomerName);
        oprot.WriteFieldEnd();
        field.Name = "ownerID";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OwnerID);
        oprot.WriteFieldEnd();
        field.Name = "deptID";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeptID);
        oprot.WriteFieldEnd();
        field.Name = "status";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Status);
        oprot.WriteFieldEnd();
        if (SpeID != null && __isset.speID) {
          field.Name = "speID";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SpeID);
          oprot.WriteFieldEnd();
        }
        if (CRDDAYS != null && __isset.CRDDAYS) {
          field.Name = "CRDDAYS";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CRDDAYS);
          oprot.WriteFieldEnd();
        }
        if (TransMode != null && __isset.transMode) {
          field.Name = "transMode";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransMode);
          oprot.WriteFieldEnd();
        }
        if (TransName != null && __isset.transName) {
          field.Name = "transName";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransName);
          oprot.WriteFieldEnd();
        }
        if (PayMode != null && __isset.payMode) {
          field.Name = "payMode";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PayMode);
          oprot.WriteFieldEnd();
        }
        if (PayName != null && __isset.payName) {
          field.Name = "payName";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PayName);
          oprot.WriteFieldEnd();
        }
        if (ExtMark != null && __isset.extMark) {
          field.Name = "extMark";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExtMark);
          oprot.WriteFieldEnd();
        }
        if (CostID != null && __isset.costID) {
          field.Name = "costID";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CostID);
          oprot.WriteFieldEnd();
        }
        if (InvTitleFlagID != null && __isset.invTitleFlagID) {
          field.Name = "invTitleFlagID";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvTitleFlagID);
          oprot.WriteFieldEnd();
        }
        if (InvTitleFlag != null && __isset.invTitleFlag) {
          field.Name = "invTitleFlag";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvTitleFlag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OrderCustomer(");
      __sb.Append(", CustomerCode: ");
      __sb.Append(CustomerCode);
      __sb.Append(", CustomerID: ");
      __sb.Append(CustomerID);
      __sb.Append(", CustomerName: ");
      __sb.Append(CustomerName);
      __sb.Append(", OwnerID: ");
      __sb.Append(OwnerID);
      __sb.Append(", DeptID: ");
      __sb.Append(DeptID);
      __sb.Append(", Status: ");
      __sb.Append(Status);
      if (SpeID != null && __isset.speID) {
        __sb.Append(", SpeID: ");
        __sb.Append(SpeID);
      }
      if (CRDDAYS != null && __isset.CRDDAYS) {
        __sb.Append(", CRDDAYS: ");
        __sb.Append(CRDDAYS);
      }
      if (TransMode != null && __isset.transMode) {
        __sb.Append(", TransMode: ");
        __sb.Append(TransMode);
      }
      if (TransName != null && __isset.transName) {
        __sb.Append(", TransName: ");
        __sb.Append(TransName);
      }
      if (PayMode != null && __isset.payMode) {
        __sb.Append(", PayMode: ");
        __sb.Append(PayMode);
      }
      if (PayName != null && __isset.payName) {
        __sb.Append(", PayName: ");
        __sb.Append(PayName);
      }
      if (ExtMark != null && __isset.extMark) {
        __sb.Append(", ExtMark: ");
        __sb.Append(ExtMark);
      }
      if (CostID != null && __isset.costID) {
        __sb.Append(", CostID: ");
        __sb.Append(CostID);
      }
      if (InvTitleFlagID != null && __isset.invTitleFlagID) {
        __sb.Append(", InvTitleFlagID: ");
        __sb.Append(InvTitleFlagID);
      }
      if (InvTitleFlag != null && __isset.invTitleFlag) {
        __sb.Append(", InvTitleFlag: ");
        __sb.Append(InvTitleFlag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
