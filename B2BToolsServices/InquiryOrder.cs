/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class InquiryOrder : TBase
  {

    public string ExtSkuCode { get; set; }

    public string ExtSkuName { get; set; }

    public string ExtSkuSpec { get; set; }

    public string ExtSkuFactory { get; set; }

    public string DrugCertificate { get; set; }

    public string ExtSkuUnit { get; set; }

    public InquiryOrder() {
    }

    public InquiryOrder(string extSkuCode, string extSkuName, string extSkuSpec, string extSkuFactory, string drugCertificate, string extSkuUnit) : this() {
      this.ExtSkuCode = extSkuCode;
      this.ExtSkuName = extSkuName;
      this.ExtSkuSpec = extSkuSpec;
      this.ExtSkuFactory = extSkuFactory;
      this.DrugCertificate = drugCertificate;
      this.ExtSkuUnit = extSkuUnit;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_extSkuCode = false;
        bool isset_extSkuName = false;
        bool isset_extSkuSpec = false;
        bool isset_extSkuFactory = false;
        bool isset_drugCertificate = false;
        bool isset_extSkuUnit = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ExtSkuCode = iprot.ReadString();
                isset_extSkuCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ExtSkuName = iprot.ReadString();
                isset_extSkuName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ExtSkuSpec = iprot.ReadString();
                isset_extSkuSpec = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ExtSkuFactory = iprot.ReadString();
                isset_extSkuFactory = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                DrugCertificate = iprot.ReadString();
                isset_drugCertificate = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                ExtSkuUnit = iprot.ReadString();
                isset_extSkuUnit = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_extSkuCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_extSkuName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_extSkuSpec)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_extSkuFactory)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_drugCertificate)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_extSkuUnit)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("InquiryOrder");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "extSkuCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtSkuCode);
        oprot.WriteFieldEnd();
        field.Name = "extSkuName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtSkuName);
        oprot.WriteFieldEnd();
        field.Name = "extSkuSpec";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtSkuSpec);
        oprot.WriteFieldEnd();
        field.Name = "extSkuFactory";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtSkuFactory);
        oprot.WriteFieldEnd();
        field.Name = "drugCertificate";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DrugCertificate);
        oprot.WriteFieldEnd();
        field.Name = "extSkuUnit";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExtSkuUnit);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("InquiryOrder(");
      __sb.Append(", ExtSkuCode: ");
      __sb.Append(ExtSkuCode);
      __sb.Append(", ExtSkuName: ");
      __sb.Append(ExtSkuName);
      __sb.Append(", ExtSkuSpec: ");
      __sb.Append(ExtSkuSpec);
      __sb.Append(", ExtSkuFactory: ");
      __sb.Append(ExtSkuFactory);
      __sb.Append(", DrugCertificate: ");
      __sb.Append(DrugCertificate);
      __sb.Append(", ExtSkuUnit: ");
      __sb.Append(ExtSkuUnit);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
