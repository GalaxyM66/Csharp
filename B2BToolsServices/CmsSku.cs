/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PriceManager
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CmsSku : TBase
  {
    private string _conversionRatio;
    private string _respBuyer;
    private string _cmsABCType;
    private string _Planbuyer;

    public string CmsSkuID { get; set; }

    public string CmsSkuCode { get; set; }

    public string CmsSkuName { get; set; }

    public string CmsDrugName { get; set; }

    public string CmsSkuSpec { get; set; }

    public string CmsSkuFactory { get; set; }

    public string CmsSkuUnit { get; set; }

    public string MatchFlag { get; set; }

    public string REGISTER { get; set; }

    public string RATIFIER { get; set; }

    public string FORMNAME { get; set; }

    public string ConversionRatio
    {
      get
      {
        return _conversionRatio;
      }
      set
      {
        __isset.conversionRatio = true;
        this._conversionRatio = value;
      }
    }

    public string RelID { get; set; }

    public string RespBuyer
    {
      get
      {
        return _respBuyer;
      }
      set
      {
        __isset.respBuyer = true;
        this._respBuyer = value;
      }
    }

    public string CmsABCType
    {
      get
      {
        return _cmsABCType;
      }
      set
      {
        __isset.cmsABCType = true;
        this._cmsABCType = value;
      }
    }

    public string Planbuyer
    {
      get
      {
        return _Planbuyer;
      }
      set
      {
        __isset.Planbuyer = true;
        this._Planbuyer = value;
      }
    }

    public int SortFlag { get; set; }

    public int RespBuyerFlag { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool conversionRatio;
      public bool respBuyer;
      public bool cmsABCType;
      public bool Planbuyer;
    }

    public CmsSku() {
    }

    public CmsSku(string cmsSkuID, string cmsSkuCode, string cmsSkuName, string cmsDrugName, string cmsSkuSpec, string cmsSkuFactory, string cmsSkuUnit, string MatchFlag, string REGISTER, string RATIFIER, string FORMNAME, string relID, int SortFlag, int respBuyerFlag) : this() {
      this.CmsSkuID = cmsSkuID;
      this.CmsSkuCode = cmsSkuCode;
      this.CmsSkuName = cmsSkuName;
      this.CmsDrugName = cmsDrugName;
      this.CmsSkuSpec = cmsSkuSpec;
      this.CmsSkuFactory = cmsSkuFactory;
      this.CmsSkuUnit = cmsSkuUnit;
      this.MatchFlag = MatchFlag;
      this.REGISTER = REGISTER;
      this.RATIFIER = RATIFIER;
      this.FORMNAME = FORMNAME;
      this.RelID = relID;
      this.SortFlag = SortFlag;
      this.RespBuyerFlag = respBuyerFlag;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_cmsSkuID = false;
        bool isset_cmsSkuCode = false;
        bool isset_cmsSkuName = false;
        bool isset_cmsDrugName = false;
        bool isset_cmsSkuSpec = false;
        bool isset_cmsSkuFactory = false;
        bool isset_cmsSkuUnit = false;
        bool isset_MatchFlag = false;
        bool isset_REGISTER = false;
        bool isset_RATIFIER = false;
        bool isset_FORMNAME = false;
        bool isset_relID = false;
        bool isset_SortFlag = false;
        bool isset_respBuyerFlag = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CmsSkuID = iprot.ReadString();
                isset_cmsSkuID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CmsSkuCode = iprot.ReadString();
                isset_cmsSkuCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CmsSkuName = iprot.ReadString();
                isset_cmsSkuName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                CmsDrugName = iprot.ReadString();
                isset_cmsDrugName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                CmsSkuSpec = iprot.ReadString();
                isset_cmsSkuSpec = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                CmsSkuFactory = iprot.ReadString();
                isset_cmsSkuFactory = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                CmsSkuUnit = iprot.ReadString();
                isset_cmsSkuUnit = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                MatchFlag = iprot.ReadString();
                isset_MatchFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                REGISTER = iprot.ReadString();
                isset_REGISTER = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                RATIFIER = iprot.ReadString();
                isset_RATIFIER = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                FORMNAME = iprot.ReadString();
                isset_FORMNAME = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                ConversionRatio = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                RelID = iprot.ReadString();
                isset_relID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                RespBuyer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                CmsABCType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                Planbuyer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.I32) {
                SortFlag = iprot.ReadI32();
                isset_SortFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.I32) {
                RespBuyerFlag = iprot.ReadI32();
                isset_respBuyerFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_cmsSkuID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsDrugName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuSpec)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuFactory)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_cmsSkuUnit)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_MatchFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_REGISTER)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_RATIFIER)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_FORMNAME)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_relID)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_SortFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_respBuyerFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("CmsSku");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "cmsSkuID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuID);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuCode);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuName);
        oprot.WriteFieldEnd();
        field.Name = "cmsDrugName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsDrugName);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuSpec";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuSpec);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuFactory";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuFactory);
        oprot.WriteFieldEnd();
        field.Name = "cmsSkuUnit";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CmsSkuUnit);
        oprot.WriteFieldEnd();
        field.Name = "MatchFlag";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MatchFlag);
        oprot.WriteFieldEnd();
        field.Name = "REGISTER";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(REGISTER);
        oprot.WriteFieldEnd();
        field.Name = "RATIFIER";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RATIFIER);
        oprot.WriteFieldEnd();
        field.Name = "FORMNAME";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FORMNAME);
        oprot.WriteFieldEnd();
        if (ConversionRatio != null && __isset.conversionRatio) {
          field.Name = "conversionRatio";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ConversionRatio);
          oprot.WriteFieldEnd();
        }
        field.Name = "relID";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RelID);
        oprot.WriteFieldEnd();
        if (RespBuyer != null && __isset.respBuyer) {
          field.Name = "respBuyer";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RespBuyer);
          oprot.WriteFieldEnd();
        }
        if (CmsABCType != null && __isset.cmsABCType) {
          field.Name = "cmsABCType";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CmsABCType);
          oprot.WriteFieldEnd();
        }
        if (Planbuyer != null && __isset.Planbuyer) {
          field.Name = "Planbuyer";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Planbuyer);
          oprot.WriteFieldEnd();
        }
        field.Name = "SortFlag";
        field.Type = TType.I32;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SortFlag);
        oprot.WriteFieldEnd();
        field.Name = "respBuyerFlag";
        field.Type = TType.I32;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RespBuyerFlag);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CmsSku(");
      __sb.Append(", CmsSkuID: ");
      __sb.Append(CmsSkuID);
      __sb.Append(", CmsSkuCode: ");
      __sb.Append(CmsSkuCode);
      __sb.Append(", CmsSkuName: ");
      __sb.Append(CmsSkuName);
      __sb.Append(", CmsDrugName: ");
      __sb.Append(CmsDrugName);
      __sb.Append(", CmsSkuSpec: ");
      __sb.Append(CmsSkuSpec);
      __sb.Append(", CmsSkuFactory: ");
      __sb.Append(CmsSkuFactory);
      __sb.Append(", CmsSkuUnit: ");
      __sb.Append(CmsSkuUnit);
      __sb.Append(", MatchFlag: ");
      __sb.Append(MatchFlag);
      __sb.Append(", REGISTER: ");
      __sb.Append(REGISTER);
      __sb.Append(", RATIFIER: ");
      __sb.Append(RATIFIER);
      __sb.Append(", FORMNAME: ");
      __sb.Append(FORMNAME);
      if (ConversionRatio != null && __isset.conversionRatio) {
        __sb.Append(", ConversionRatio: ");
        __sb.Append(ConversionRatio);
      }
      __sb.Append(", RelID: ");
      __sb.Append(RelID);
      if (RespBuyer != null && __isset.respBuyer) {
        __sb.Append(", RespBuyer: ");
        __sb.Append(RespBuyer);
      }
      if (CmsABCType != null && __isset.cmsABCType) {
        __sb.Append(", CmsABCType: ");
        __sb.Append(CmsABCType);
      }
      if (Planbuyer != null && __isset.Planbuyer) {
        __sb.Append(", Planbuyer: ");
        __sb.Append(Planbuyer);
      }
      __sb.Append(", SortFlag: ");
      __sb.Append(SortFlag);
      __sb.Append(", RespBuyerFlag: ");
      __sb.Append(RespBuyerFlag);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
